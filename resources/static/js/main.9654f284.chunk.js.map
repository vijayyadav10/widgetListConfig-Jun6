{"version":3,"sources":["helper/Constant.js","api/Api.js","helper/Helper.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/MultiContentList.js","en.js","it.js","App.js","custom-element/et-app.js"],"names":["PERPAGEOPTIONS","SELECT","id","NAME","CREATEDBY","LASTEDITED","CREATEDDATE","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","NO_DATA_AVAILABLE_MSG","domain","process","templateBaseUrl","rootAdminEndPoint","sortByCreateDateByDescOrder","localeUrl","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","data","getContents","collectionType","page","pageSize","url","getLocales","getAllRecordsByCollectionType","lastPageSize","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","token","window","entando","keycloak","authenticated","localStorage","getItem","headers","Authorization","config","defaultOptions","getKey","content","keys","Object","index","findIndex","item","toLowerCase","allowedKeys","filter","includes","length","searchByKey","parseData","JSON","parse","SimpleTable","props","componentDidMount","decodeURI","contentIdAndTemplateId","getContentByHighestId","setState","loadingData","componentDidUpdate","prevProps","prevState","getContentIds","contents","highestContentId","map","el","sort","b","reverse","selectedContentName","parsedSelectedContent","selectedContent","filteredCont","cont","results","find","templateId","renderToggleButton","isMenuShown","onClick","type","style","position","height","top","right","border","e","preventDefault","className","onChangeTemplateId","templateSelectedForContent","target","value","templateChangedForContent","applyTemplateToContent","mappingOfContentTemplate","setContentTemplate","onApplyToAll","document","getElementsByName","forEach","state","applyTemplateToAllContent","toString","applyTemplateToAllContentTwo","selectTempForContent","templateType","selectedTemplateType","this","Spinner","loading","size","decideToShowQuery","contentAttribute","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","width","display","name","onChange","message","selected","disabled","hidden","templateList","templateName","textAlign","to","margin","React","Component","Title","createdAt","createDate","selectDefaultTemplate","strapiDomain","Config","setSelectedContent","selectedContentArr","selectedContenttype","handleTypeaheadChangeContentType","selectedContentType","option","label","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","element","push","info","pluralName","templatesList","collectionTypes","saveQuery","saveQueryDecode","handleAddNewContent","strapiContentManagerUrl","newWindow","open","focus","selectedContentLabel","SaveQueryHandler","searchTerm","bind","xs","title","role","bsStyle","manipulateIsEditable","marginTop","setTemplateId","borderRight","lg","padding","color","intl","formatMessage","injectIntl","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","Number","checkIfComponent","dataObj","arr","split","indexOf","replace","Array","isArray","theKey","theIndex","Panel","eventKey","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","paddingRight","lineHeight","renderAccordionData","toggle","Body","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","setActiveTabKey","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","show","mockRows","selectedCollectionType","collectionAttributes","dummyData","dialogClassName","onHide","Header","fetchTitleOrName","tabIndex","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","MultiContentList","populateConfigForm","setCollectionTypeState","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","getContentsByCollectionType","searchText","selectedCollectionTypeValue","searchQuery","colLabel","searchResult","stateUpdateOnFilterContentsByName","componentWillUnmount","stowSearchQueryTillSubmit","selectedContentList","btnVisibility","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","setFieldSearchBy","collType","contentData","lastPage","pagination","pageCount","totalItems","total","setSearchBy","setPage","isNaN","totalPages","newPaginationState","assign","pageChangeValue","onContentSearch","handleQueryChange","onPerPageSelect","onPageInput","onSubmit","onContentListSaveHandler","setQueryTerm","setSelectedContentName","checkIfSelected","editMode","isEditable","cancelHandler","tempSelectedCollectionType","collectionTypeApiData","displayName","singularName","contentItem","removedUnselectedContentId","perPage","perPageOptions","itemsStart","itemsEnd","Math","min","placeholder","emptyLabel","options","toggleMenu","align","onContentSelect","checked","itemCount","viewType","amountOfPages","pageInputValue","onPageSet","changePage","onFirstPage","onPreviousPage","onNextPage","onLastPage","messages","sm","borderBottom","isToEnableSaveQueryBtn","App","setLocale","getJsonString","stringify","encodeURI","contentName","contentLabel","saveQueryData","fieldSearchWith","currLocale","decideLocale","en","it","path","exact","WidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","MainApp","ref","ReactDOM","render","current","createElement","appendChild","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.9654f284.chunk.js","sourcesContent":["import { locale } from \"moment\";\nimport {  FormattedMessage } from \"react-intl\";\n\n/*********************\n * PAGINATION ********\n *********************/\n\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = \"Select Collection Type\"; \n\n/*********************\n * UI LABEL **********\n *********************/\nexport const SELECT = <FormattedMessage id='app.select' />\nexport const NAME = <FormattedMessage id='app.name' />\nexport const CREATEDBY = <FormattedMessage id='app.created' />\nexport const LASTEDITED = <FormattedMessage id='app.lastEdited' />\nexport const CREATEDDATE = <FormattedMessage id='app.createdDate' />\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    LASTEDITED: LASTEDITED,\n    CREATEDDATE: CREATEDDATE\n}\n\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.addNewContent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS =  [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = <FormattedMessage id='app.noDataAvailable' />","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst localeUrl = `${domain}/i18n/locales`\n\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getAllRecordsByCollectionType = async (collectionType, lastPageSize) => {\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=1&pageSize=${lastPageSize}&sort=id:ASC`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    // const data = await axios.get(`${templateBaseUrl}`);\n    //TODO: Uncomment when using proper token system for template management.\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    // return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    searchByKey = '';\n    return '-';\n}\n\nexport const PAGINATION_MESSAGES = (props) => ({\n    \"firstPage\": props.intl.formatMessage({ id: \"app.firstPage\" }),\n    \"previousPage\": props.intl.formatMessage({ id: \"app.previousPage\" }),\n    \"currentPage\": props.intl.formatMessage({ id: \"app.currentPage\" }),\n    \"nextPage\": props.intl.formatMessage({ id: \"app.nextPage\" }),\n    \"lastPage\": props.intl.formatMessage({ id: \"app.lastPage\" }),\n    \"perPage\": props.intl.formatMessage({ id: \"app.perPage\" }),\n    \"of\": props.intl.formatMessage({ id: \"app.of\" })\n});\n\nexport const parseData = (data) => data.length > 0 ? JSON.parse(data) : data;\n","import moment from 'moment';\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport { getKey, parseData } from '../helper/Helper';\nimport {  FormattedMessage } from \"react-intl\";\nimport { fetchContents, getAllRecordsByCollectionType } from '../api/Api';\nimport { Spinner } from 'patternfly-react/dist/js/components/Spinner';\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n            templateChangedForContent: null,\n            templateSelectedForContent: 0,\n            selectedContent: [],\n            loadingData: false\n        }\n    }\n\n    componentDidMount = () => {\n        if (parseData(decodeURI(this.props.contentIdAndTemplateId)).length) {\n            this.getContentByHighestId();\n        }\n        if (!this.props.contentIdAndTemplateId) {\n            this.setState({ loadingData: false })\n        }\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.contentIdAndTemplateId !== this.props.contentIdAndTemplateId) {\n            if (parseData(decodeURI(this.props.contentIdAndTemplateId)).length) {\n                this.getContentByHighestId();\n            }\n        };\n    }\n\n    getContentByHighestId = async () => {\n        this.setState({loadingData : true})\n        const getContentIds = this.props.contentIdAndTemplateId && parseData(decodeURI(this.props.contentIdAndTemplateId));\n        let contents = [];\n        if (getContentIds) {\n            const highestContentId = getContentIds.map(el => el.contentId).sort(function (a, b) { return a - b; }).reverse()[0];\n            contents = await getAllRecordsByCollectionType(this.props.selectedContentName, highestContentId);\n        }\n        const parsedSelectedContent = this.props.selectedContent.length ? parseData(this.props.selectedContent) : ''\n        if (parsedSelectedContent.length) {\n            const filteredCont = parsedSelectedContent.map(cont => contents.results.find(el => el.id === cont.id))\n            filteredCont.map(el => {\n                getContentIds.find(cont => {\n                    if (el.id === +cont.contentId) {\n                        el.templateId = +cont.templateId;\n                    }\n                })\n            });\n            this.setState({ selectedContent: filteredCont, loadingData: false })\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e, contentId) => {\n        this.setState({ templateSelectedForContent: e.target.value })\n        this.setState({ templateChangedForContent: contentId });\n        const applyTemplateToContent = parseData(this.props.mappingOfContentTemplate).map(el => {\n            el.contentId === contentId && (el.templateId = e.target.value)\n            return {id: el.id, contentId: el.contentId, templateId: el.templateId};\n        });\n        this.props.setContentTemplate(applyTemplateToContent);\n    }\n\n    onApplyToAll = () => {\n        document.getElementsByName('modelId').forEach((el) => { el.value = `${this.state.templateSelectedForContent}` })\n        const applyTemplateToAllContent = parseData(this.props.mappingOfContentTemplate).map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.props.setContentTemplate(applyTemplateToAllContent);\n        const applyTemplateToAllContentTwo = this.state.selectedContent.map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.setState({ selectedContent: applyTemplateToAllContentTwo })\n    }\n\n    selectTempForContent = (cont) => {\n        if (cont.templateId) return cont.templateId;\n        return 'none';\n    }\n\n    render() {\n        const getContentIds = this.props.contentIdAndTemplateId && parseData(decodeURI(this.props.contentIdAndTemplateId));\n        return (\n            <>\n                {this.state.loadingData &&\n                    <Spinner\n                        loading={this.state.loadingData}\n                        className=\"\"\n                        size=\"md\"\n                    ></Spinner>}\n                {!this.state.loadingData && <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr className={this.props.decideToShowQuery() ? 'disabled-table' : ''}>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.state.selectedContent.length > 0 && (\n                                this.state.selectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td width=\"30%\">\n                                                {/* <select defaultValue={item.templateId ? item.templateId+'' : 'none'} */}\n                                                <select\n                                                    style={{ display: \"inline-block\", width: \"50%\" }}\n                                                    name=\"modelId\" className=\"form-control\"\n                                                    onChange={(e) => this.onChangeTemplateId(e, item.id)}\n                                                >\n                                                    {<FormattedMessage id='app.selectTemplate' >\n                                                        {(message) => (<option\n                                                            selected={!item.templateId ? true : false}\n                                                            value='none' disabled hidden>\n                                                            {message}\n                                                        </option>)\n                                                        }\n                                                    </FormattedMessage>}\n                                                    {this.props.templateList.length > 0 && this.props.templateList.map((el) => {\n                                                        return (<option\n                                                            selected={+item.templateId === +el.id ? true : false}\n                                                            key={el.id}\n                                                            value={el.id}>{el.templateName}</option>);\n                                                    })}\n                                                </select>\n                                                {item.id === this.state.templateChangedForContent && <div onClick={this.onApplyToAll} style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }}>\n                                                    <Link to=\"#\">\n                                                        <span className=\"fa fa-copy\" style={{ margin: \"0px 10px\" }}></span>\n                                                        <FormattedMessage id='app.applyToAllContents' />\n                                                    </Link>\n                                                </div>}\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>}\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.name\" ,\n    createdAt: \"app.created\",\n    updatedAt: \"app.lastEdited\",\n    createDate: \"app.createdDate\",\n    selectDefaultTemplate: \"app.selectDefaultTemplate\"\n    // restirctions: \"Restrictions\"\n}","import {\n    Button, Col, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCollectionTypes, getTemplate } from '../api/Api';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport {  FormattedMessage, injectIntl } from \"react-intl\";\nimport { parseData } from '../helper/Helper';\n\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_API_URL}`;\n\nclass Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedContent: [],\n            // name: null,\n            // nameTwo: null,\n            collectionTypes: [],\n            // selectedContentId: 0,\n            // selectedTemplateId: 'default',\n            templateList: [],\n            templateId: 'none'\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        // this.setState({ selectedContent: selectedContentArr })\n        // this.setState({ name: selectedContentArr })\n        // this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        // this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n    }\n\n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.saveQuery !== this.props.saveQuery) {\n            const saveQueryDecode = parseData(decodeURI(this.props.saveQuery));\n            if (saveQueryDecode) {\n                // this.statetemplateId = saveQueryDecode.templateId;\n                this.setState({templateId: saveQueryDecode.templateId})\n            }\n        }\n    }\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    decideToShowQuery = () => this.props.selectedContentLabel && !this.props.selectedContent.length;\n\n    onChangeTemplateId = (e) => {\n        this.props.SaveQueryHandler(\n            {\n                \"templateId\": e.target.value,\n                \"searchTerm\": this.props.searchTerm\n            }\n        );\n    }\n\n    render() {\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            \n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.contentList\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                    <span><FormattedMessage id=\"app.info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/configpage\">\n                                            <Button bsStyle=\"primary\"\n                                                onClick={() => (this.decideToShowQuery() || this.props.selectedContent.length) && this.props.manipulateIsEditable('edit')}\n                                            >\n                                                {this.props.selectedContent.length || this.decideToShowQuery() ? <FormattedMessage id='app.edit' /> : <FormattedMessage id='app.addExistingContent' />}\n                                                {!this.decideToShowQuery() && this.props.selectedContent.length > 0 && ' list of '}\n                                                {this.decideToShowQuery() && <FormattedMessage id='app.query' />}\n                                                {this.props.selectedContent.length ? <FormattedMessage id='app.contentsButton' /> : !this.decideToShowQuery() ? <FormattedMessage id='app.contentButton' /> : ''}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    // content={this.state.selectedContent}\n                                    selectedContent={this.props.selectedContent}\n                                    mappingOfContentTemplate={this.props.mappingOfContentTemplate}\n                                    setContentTemplate={this.props.setContentTemplate}\n                                    decideToShowQuery={this.decideToShowQuery}\n                                    contentIdAndTemplateId={this.props.contentIdAndTemplateId}\n                                    selectedContentName={this.props.selectedContentName}\n                                />\n                                {\n                                     (\n                                        <div className=\"form-horizontal SingleContentConfigForm custom-well well\">\n                                            <Row className=\"divider\">\n                                                <Col xs={2}>\n                                                    <span className=\"SectionTitle\" role=\"button\">\n                                                        <span><FormattedMessage id='app.query' /></span>\n                                                    </span>\n                                                </Col>\n                                                <Col xs={10}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <span><b><FormattedMessage id='app.selectDefaultTemplate' /></b></span>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            {this.decideToShowQuery() && <Row>\n                                                <Col xs={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                    <FormattedMessage id='app.savedAsQuery' />\n                                                </Col>\n                                                <Col xs={1} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                </Col>\n                                                <Col lg={6} style={{ border: \"1px solid lightgrey\", padding: \".2rem\" }}>\n                                                    <code>\n                                                        <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.props.selectedContentLabel} </span>\n                                                        <span style={{ color: \"#0088ce\" }}>\n                                                            { this.props.searchTerm && <b>WHERE Name =  </b>}\n                                                            { this.props.searchTerm && `%${this.props.searchTerm}% ` }\n                                                            {/* <b>WHERE Name =  </b> %{this.props.searchTerm}% */}\n                                                             <b>ORDER BY</b> creation date <b>DESC</b></span>\n                                                    </code>\n                                                </Col>\n                                                <Col lg={3}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <select style={{ display: \"inline-block\" }} name=\"modelId\" className=\"form-control\" onChange={(e) => this.onChangeTemplateId(e)}>\n                                                            <option\n                                                                selected={this.state.templateId === \"none\" ? true : false}\n                                                                value=\"none\"\n                                                                disabled\n                                                                hidden>{this.props.intl.formatMessage({ id: \"app.selectTemplate\" })}</option>\n                                                            {this.state.templateList.length > 0 && this.state.templateList.map((el) => {\n                                                                return (<option\n                                                                    selected={+this.state.templateId === +el.id ? true : false}\n                                                                    key={el.id} value={el.id}>\n                                                                    {el.templateName}\n                                                                </option>);\n                                                            })}\n                                                        </select>\n                                                    </div>\n                                                </Col>\n                                            </Row>}\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n\n                </Row>\n            </form>\n        )\n    }\n}\n\nexport default injectIntl(Config);","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem', paddingRight: '2rem', lineHeight: '1.2' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getContentDetailsByCollectionTypeAndId, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        this.props.setActiveTabKey(index);\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async () => {\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (this.props.collectionType && this.props.contentId) {\n            if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n                const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n                this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n                this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n                this.props.setActiveTabKey(0);\n                this.setState({ currentCode: [this.props.contentId] })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.props.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import moment from 'moment';\nimport { Col, Grid, PaginationRow, Row, ListView, ListViewItem } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";          \nimport { PAGINATION_MESSAGES, parseData } from '../helper/Helper';\nimport { Spinner } from 'patternfly-react/dist/js/components/Spinner';\n class MultiContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // PAGINATION STATE\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      searchBtnClk: false,\n\n      // MODAL STATE\n      show: false,\n      activeTabKey: 0,\n      contentDetailsOnModal: {},\n\n      // SEARCH STATE\n      searchQuery: '',\n      setSearchBy: '',\n      stowSearchQueryTillSubmit: '',\n\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: [],\n      contentIdForModal: '',\n      tempSelectedCollectionType: [],\n      loadingData: false\n    }\n    this.searchByKey = '';\n    // this.stowSearchQueryTillSubmit = '';\n\n  }\n\n  componentDidMount = async () => {\n    this.populateConfigForm();\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n  }\n  \n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      if (this.props.searchText || this.searchByKey) {\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value ? this.state.selectedCollectionType[0].value : this.props.selectedCollectionTypeValue.value,\n          this.state.searchQuery ? this.state.searchQuery : this.props.searchText, this.props.colLabel, this.state.page, this.state.pageSize\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.shouldShowEtSaveBtn('visible');\n  }\n\n  populateConfigForm = async () => {\n    if (this.props.selectedCollectionTypeValue.value && this.props.selectedCollectionTypeValue.label) {\n      this.setState({ selectedCollectionType: [this.props.selectedCollectionTypeValue] })\n      if (this.props.searchText && this.props.colLabel) {\n        this.searchByKey = this.props.colLabel;\n        this.setState({searchQuery: this.props.searchText, stowSearchQueryTillSubmit: this.props.searchText})\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText, this.props.colLabel, PAGE, PAGESIZE\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.props.selectedCollectionTypeValue.value)\n      }\n    }\n    if (this.props.selectedContentList.length) {\n      this.setState({selectedContent: parseData(this.props.selectedContentList)})\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  stateUpdateOnFilterContentsByName(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true,\n      loadingData: false\n    });\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n    this.setState({ show: true, contentDetailsOnModal: content, contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    // this.props.setQueryTerm('');\n    this.props.setFieldSearchBy('');\n    this.setState({ contents: [], selectedContent: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType, searchQuery: '', stowSearchQueryTillSubmit: '' })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n    }\n    this.setState({ contentIdForModal: undefined });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    this.setState({\n      loadingData: true,\n     });\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n      setSearchBy: contentData && contentData.results.length && Object.keys(contentData.results[0])[1],\n      loadingData: false,\n      // selectedContent: [] // commented due to issue of clearing the cache of selected content.\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: this.state.stowSearchQueryTillSubmit }, async () => {\n      // this.setState({ stowSearchQueryTillSubmit: '' })\n      // collectionType, query, searchBy\n      this.props.setFieldSearchBy(this.searchByKey);\n      if (this.state.searchQuery) {\n        this.setState({ loadingData: true });\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value,\n          this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n          );\n          this.stateUpdateOnFilterContentsByName(searchResult);\n        } else {\n          this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n        }\n    })\n  }\n\n   handleQueryChange = (e) => {\n     // this.props.setQueryTerm( e.target.value );\n     e.preventDefault();\n     this.setState({ stowSearchQueryTillSubmit: e.target.value })\n     // this.setState({ searchQuery: e.target.value })\n   }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  onContentSelect(content) {\n    if (!this.state.selectedContent.find(contentItem => (contentItem.id === content.id))) {\n      this.setState({ selectedContent: [content, ...this.state.selectedContent] })\n    } else {\n      const removedUnselectedContentId = this.state.selectedContent.filter(contentItem => contentItem.id !== content.id);\n      this.setState({ selectedContent: removedUnselectedContentId })\n    }\n  }\n\n\n  onContentListSaveHandler = () => {\n    this.props.setQueryTerm( this.state.searchQuery );\n    this.props.setContentTemplate(this.state.selectedContent.map((el) => ({ ...el, contentId: el.id, templateId: null })))\n    this.props.setSelectedContentName(this.state.selectedCollectionType[0].value, this.state.selectedCollectionType[0].label, this.state.searchQuery)\n  }\n\n  checkIfSelected = (content) => {\n    if (this.state.selectedContent.length) {\n      const selectedItem = this.state.selectedContent.find(el => { return (el.id === content.id); })\n      if (selectedItem) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n   fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  isToEnableSaveQueryBtn() {\n    return !(this.state.selectedContent.length === 0 && this.state.contents && this.state.contents.length);\n  }\n\n   editMode = (key) => {\n     if (this.props.isEditable === 'edit' &&\n       Object.keys(this.props.selectedCollectionTypeValue).length\n       && this.props.selectedCollectionTypeValue.label\n       && this.props.selectedCollectionTypeValue.value\n     ) {  // keep in constant file\n       return this.props.selectedCollectionTypeValue[key]\n     }\n     return null\n   }\n\n   cancelHandler = () => {\n     this.props.setSelectedContentName(this.editMode('value'), this.editMode('label'))\n     if (this.props.isEditable === 'edit' && this.state.selectedContent.length) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n     if (this.props.isEditable === 'edit' && !this.props.searchText) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n   }\n\n   render() {\n    const pagination = {\n      page: !this.state.page ? 1 : this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n              <FormattedMessage id=\"app.contentList\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b><FormattedMessage id=\"app.selectCollectionType\" /></b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n              placeholder={this.props.intl.formatMessage({ id: \"app.selectCollection\" })}\n              emptyLabel={this.props.intl.formatMessage({ id: \"app.noMatchesFound\" })}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.searchQuery ? this.state.searchQuery : this.state.stowSearchQueryTillSubmit}\n                        value={this.state.stowSearchQueryTillSubmit}\n                        // this.stowSearchQueryTillSubmit\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                        placeholder={this.props.intl.formatMessage({ id: \"app.searchContentByName\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id='app.search' /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                {this.state.loadingData &&\n                  <Spinner\n                    loading={this.state.loadingData}\n                    className=\"\"\n                    size=\"md\"\n                  ></Spinner>}\n                {!this.state.loadingData && <>\n                  <table className=\"table dataTable table-striped table-bordered table-hover\">\n                    <thead>\n                      <tr>\n                        {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.contents.map(content => {\n                        return (\n                          <tr key={content.id}>\n                            <td width=\"5%\" align=\"center\">\n                              <input onChange={() => {\n                                this.onContentSelect(content); if (!this.state.selectedContent.length) {\n                                  this.props.setQueryTerm('')\n                                }\n                              }}\n                                type=\"checkbox\" checked={this.checkIfSelected(content)} id={content + content.id} name=\"content\" value={content.id}\n                              />\n                            </td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          </tr>)\n                      })}\n                    </tbody>\n                  </table>\n                  <div className=\"custom-page\"></div>\n                  <PaginationRow\n                    itemCount={this.state.totalItems}\n                    itemsStart={itemsStart}\n                    itemsEnd={itemsEnd}\n                    viewType=\"table\"\n                    pagination={pagination}\n                    amountOfPages={!this.state.lastPage ? 1 : this.state.lastPage}\n                    pageInputValue={!this.state.currPageWillUpdating ? 1 : this.state.currPageWillUpdating}\n                    onPageSet={this.changePage}\n                    onPerPageSelect={this.onPerPageSelect}\n                    onFirstPage={() => { this.setState({ searchBtnClk: false }); this.changePage(1) }}\n                    onPreviousPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page - 1) }}\n                    onPageInput={this.onPageInput}\n                    onNextPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page + 1) }}\n                    onLastPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.lastPage) }}\n                    onSubmit={this.onSubmit}\n                    messages={PAGINATION_MESSAGES(this.props)}\n                  />\n                </>\n                }\n              </Col>\n            </Row>\n            {\n              <>\n                <Row className=\"mt-2\" >\n                  <Col sm={12}>\n                    <h6><b><FormattedMessage id='app.widgetConfiguration' /></b></h6>\n                  </Col>\n                </Row>\n                <Row className=\"mt-2\" >\n                  <Col sm={2}>\n                  <FormattedMessage id='app.queryFilter' />\n                  </Col>\n                  <Col sm={10} className=\"queryBg\">\n                    <code>\n                      <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.state.selectedCollectionType[0].label} </span>\n                      <span style={{ color: \"#0088ce\" }}>\n                        {\n                          // (this.state.searchQuery.length || this.props.searchText.length) > 0 && (<><b>WHERE Name = </b> %{this.state.searchQuery || this.props.searchText}% </>)\n                          (this.state.searchQuery.length > 0) && (<><b>WHERE Name = </b> %{this.state.searchQuery}% </>)\n                        }\n                        <b>ORDER BY</b> creation date <b>DESC</b>\n                      </span>\n                    </code>\n                  </Col>\n                </Row>\n              </>\n              }\n            {this.state.selectedContent.length > 0 && this.state.selectedContent.map(content => {\n              return (\n                <Row className=\"mt-2\" key={content.id} style={{ borderBottom: \"1px solid lightgrey\", padding: \".5rem\" }}>\n                  <Col sm={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                    {this.fetchTitleOrName(content)}\n                  </Col>\n                  <Col sm={8}>\n                    {this.state.selectedCollectionType && this.state.selectedCollectionType[0].label}\n                  </Col>\n                  <Col sm={2} className={\"SingleContentConfigFormBody__addButtons\"}>\n                    <button className=\"btn\" onClick={()=>this.onContentSelect(content)}><FormattedMessage id='app.remove' /></button>\n                  </Col>\n                </Row>\n              )\n            })}\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={6}>\n              </Col>\n              <Col sm={6} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n\n                  <button className=\"btn-default btn\"\n                    onClick={() => this.cancelHandler()}>\n                    <FormattedMessage id='app.cancel' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={this.isToEnableSaveQueryBtn()}>\n                    <FormattedMessage id='app.saveAsQuery' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={!this.state.selectedContent.length}>\n                    <FormattedMessage id='app.saveAsListOfContents'/>\n                  </button>\n\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey} />\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(MultiContentList);                                 ","export default {\n    'app.contentList': 'Content List',\n    'app.selectCollectionType': 'Select Collection Type',\n    'app.info':'Info',\n    'app.content': 'Content',\n    'app.contentsButton': 'contents',\n    'app.contentButton': 'content',\n    'app.name':'Name',\n    'app.created':'Created by',\n    'app.lastEdited':'Last edited',\n    'app.createdDate':'Created date',\n    'app.selectDefaultTemplate':'Select default template*',\n    'app.addExistingContent':'Add existing ',\n    'app.addNewContent':'Add new content',\n    'app.select':'Select',\n    'app.selectCollection':'Choose an option',\n    'app.widgetConfiguration':'Widget Configuration',\n    'app.queryFilter':'Query Filter',\n    'app.cancel':'Cancel',\n    'app.savedAsQuery':'Saved as Query',\n    'app.saveAsQuery':'Save as Query',\n    'app.saveAsListOfContents':'Save as list of Contents',\n    'app.select':'Select',\n    // 'app.lastEdited':'Last Edited',\n    'app.createdEdited':'Created Edited',\n    'app.searchContentByName':'Filter By Name...',\n    'app.remove':'Remove',\n    'app.query':' Query',\n    'app.selectTemplate':'Select Template',\n    'app.edit':'Edit',\n    'app.queryFilter':' Query Filter',\n    'app.search':'Search',\n    'app.applyToAllContents':'Apply to all contents',\n    'app.noMatchesFound': 'No matches found',\n    'app.noDataAvailable': 'No data available',\n    'app.firstPage': 'First Page',\n    'app.previousPage': 'Previous Page',\n    'app.currentPage': 'Current Page',\n    'app.nextPage': 'Next Page',\n    'app.lastPage': 'Last Page',\n    'app.perPage': 'per page',\n    'app.of': 'of',\n    }","export default {\n    'app.contentList': 'Content Elenco',\n    'app.selectCollectionType': 'Seleziona Tipo di raccolta',\n    'app.info':'Informazioni',\n    'app.content': ' Contenuto',\n    'app.contentsButton': 'contenuti',\n    'app.contentButton': 'contenuto',\n    'app.name':'Nome',\n    'app.created':'Creata da',\n    'app.lastEdited':'Ultima modifica',\n    'app.createdDate':'Creata Data',\n    'app.selectDefaultTemplate':'Seleziona il modello predefinito*',\n    'app.addExistingContent':'Aggiungi esistente',\n    'app.addNewContent':'Aggiungi nuovo contenuto',\n    'app.select':'Seleziona',\n    'app.selectCollection':\"Scegliere un'opzione\",\n    'app.widgetConfiguration':'Configurazione del widget',\n    'app.queryFilter':'Filtro di query',\n    'app.cancel':'Annulla',\n    'app.savedAsQuery':'Salvato come query',\n    'app.saveAsQuery':'Salva come query',\n    'app.saveAsListOfContents':'Salva come elenco di contenuti',\n    'app.select':'Selezionare',\n    // 'app.lastEdited':'Ultima modifica',\n    'app.createdEdited':'Data di Creazione',\n    'app.searchContentByName':'Filtra per nome',\n    'app.remove':'Rimuovere',\n    'app.query':'Domanda',\n    'app.selectTemplate':'Seleziona Modello',\n    'app.edit':'modificare',\n    'app.query':'Filtro di query',\n    'app.search':'Ricerca',\n    'app.applyToAllContents':'Applica a tutti i contenuti',\n    'app.noMatchesFound': 'Nessun risultato trovato',\n    'app.noDataAvailable': 'Nessun dato disponibile',\n    'app.firstPage': 'Prima pagina',\n    'app.previousPage': 'Pagina precedente',\n    'app.currentPage': 'Pagina corrente',\n    'app.nextPage': 'Pagina successiva',\n    'app.lastPage': 'Ultima pagina',\n    'app.perPage': 'per pagina',\n    'app.of': 'di',\n    }\n\n    //'app.content': 'Contenuto',","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { IntlProvider } from \"react-intl\";\nimport Config from './page/Config';\nimport MultiContentList from './page/MultiContentList';\n\nimport en from \"./en.js\";\nimport it from \"./it.js\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentName: null,\n            mappingOfContentTemplate: '',\n            contentIdAndTemplateId: '',\n            selectedCollectionType: null,\n            searchText: '',\n            saveQuery: '',\n            colLabel: '',\n            locale:'en',\n            isEditable: '',\n        };\n    }\n\n    componentDidMount = () => {\n        this.setLocale();\n    }\n\n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContentTemplate = (data) => {\n        const getJsonString = JSON.stringify(data.map(el => ({ templateId: el.templateId, contentId: el.contentId })));\n        this.setState({ mappingOfContentTemplate: data.length ? JSON.stringify(data): '', contentIdAndTemplateId: encodeURI(getJsonString) });\n    }\n\n    setSelectedContentName = (contentName, contentLabel) => {\n        this.setState({ selectedContentName: contentName, selectedCollectionType: contentLabel })\n    }\n\n    setQueryTerm = (searchTerm) => {\n        this.setState({ searchText: searchTerm })\n    }\n\n    SaveQueryHandler = (saveQueryData) => {\n        this.setState({ saveQuery: encodeURI(JSON.stringify(saveQueryData)) });\n    }\n\n    setFieldSearchBy = (fieldSearchWith) => {\n        this.setState({ colLabel: fieldSearchWith })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    manipulateIsEditable = (value) => this.setState({ isEditable: value });\n\n    decideLocale = locale => {\n        if (locale === 'en') return en;\n        if (locale === 'it') return it;\n    }\n\n    render() {\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.decideLocale(this.state.locale)}>\n                <>\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config\n                                    selectedContent={this.state.mappingOfContentTemplate}\n                                    mappingOfContentTemplate={this.state.mappingOfContentTemplate}\n                                    setContentTemplate={this.setContentTemplate}\n                                    selectedContentLabel={this.state.selectedCollectionType}\n                                    searchTerm={this.state.searchText}\n                                    SaveQueryHandler={this.SaveQueryHandler}\n                                    selectedContentName={this.state.selectedContentName}\n                                    manipulateIsEditable={this.manipulateIsEditable}\n                                    contentIdAndTemplateId={this.state.contentIdAndTemplateId}\n                                    saveQuery={this.state.saveQuery}\n                                />\n                            </Route>\n                            <Route path='/configpage' exact>\n                                <MultiContentList\n                                    setContentTemplate={this.setContentTemplate}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    setQueryTerm={this.setQueryTerm}\n                                    setFieldSearchBy={this.setFieldSearchBy}\n                                    searchText={this.state.searchText}\n                                    selectedCollectionTypeValue={{ label: this.state.selectedCollectionType, value: this.state.selectedContentName }}\n                                    selectedContentList={this.state.mappingOfContentTemplate}\n                                    colLabel={this.state.colLabel}\n                                    isEditable={this.state.isEditable}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App;\n\n// just for update of tags","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass WidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        // this.render()\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n}\n\ncustomElements.define('list-content-widget-config', WidgetElement);\n\nexport default WidgetElement;\n"],"sourceRoot":""}