{"version":3,"sources":["helper/Constant.js","api/Api.js","helper/Helper.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/MultiContentList.js","en.js","it.js","App.js","custom-element/et-app.js"],"names":["PERPAGEOPTIONS","SELECT","id","NAME","CREATEDBY","LASTEDITED","CREATEDEDITED","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","domain","process","templateBaseUrl","rootAdminEndPoint","sortByCreateDateByDescOrder","localeUrl","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","data","getContents","collectionType","page","pageSize","url","getLocales","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","headers","config","defaultOptions","getKey","content","keys","Object","index","findIndex","item","toLowerCase","allowedKeys","filter","includes","length","searchByKey","SimpleTable","props","renderToggleButton","isMenuShown","onClick","type","style","position","height","top","right","border","e","preventDefault","className","onChangeTemplateId","setState","templateSelectedForContent","target","value","templateChangedForContent","applyTemplateToContent","mappingOfContentTemplate","map","el","templateId","setContentTemplate","onApplyToAll","document","getElementsByName","forEach","state","applyTemplateToAllContent","toString","templateType","selectedTemplateType","parseSelectedContent","this","selectedContent","JSON","parse","decideToShowQuery","contentAttribute","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","width","defaultValue","display","name","onChange","message","disabled","hidden","templateList","templateName","textAlign","to","margin","React","Component","Title","createdAt","createDate","selectDefaultTemplate","strapiDomain","Config","setSelectedContent","selectedContentArr","selectedContenttype","handleTypeaheadChangeContentType","selected","selectedContentType","option","label","componentDidMount","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","element","push","info","pluralName","selectedContentName","templatesList","collectionTypes","handleAddNewContent","strapiContentManagerUrl","newWindow","window","open","focus","selectedContentLabel","SaveQueryHandler","searchTerm","bind","console","log","xs","title","role","bsStyle","manipulateIsEditable","marginTop","setTemplateId","borderRight","lg","padding","color","intl","formatMessage","injectIntl","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","Number","checkIfComponent","dataObj","arr","split","indexOf","replace","Array","isArray","theKey","theIndex","Panel","eventKey","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","renderAccordionData","toggle","Body","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","setActiveTabKey","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","componentDidUpdate","prevProps","prevState","show","mockRows","selectedCollectionType","collectionAttributes","dummyData","dialogClassName","onHide","Header","fetchTitleOrName","tabIndex","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","MultiContentList","populateConfigForm","setCollectionTypeState","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","getContentsByCollectionType","searchText","selectedCollectionTypeValue","searchQuery","colLabel","searchResult","stateUpdateOnFilterContentsByName","componentWillUnmount","selectedContentList","btnVisibility","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","setQueryTerm","setFieldSearchBy","contents","collType","contentData","results","lastPage","pagination","pageCount","totalItems","total","setSearchBy","setPage","isNaN","totalPages","newPaginationState","assign","pageChangeValue","onContentSearch","handleQueryChange","onPerPageSelect","onPageInput","onSubmit","onContentListSaveHandler","setSelectedContentName","checkIfSelected","find","editMode","isEditable","tempSelectedCollectionType","collectionTypeApiData","displayName","singularName","contentItem","removedUnselectedContentId","perPage","perPageOptions","itemsStart","itemsEnd","Math","min","placeholder","options","toggleMenu","align","onContentSelect","checked","itemCount","viewType","amountOfPages","pageInputValue","onPageSet","changePage","onFirstPage","onPreviousPage","onNextPage","onLastPage","sm","borderBottom","isToEnableSaveQueryBtn","App","setLocale","getJsonString","stringify","contentIdAndTemplateId","encodeURI","contentName","contentLabel","saveQueryData","saveQuery","fieldSearchWith","currLocale","messages","en","it","path","exact","WidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","MainApp","ref","ReactDOM","render","current","createElement","appendChild","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.ef96eb14.chunk.js","sourcesContent":["import { locale } from \"moment\";\nimport {  FormattedMessage } from \"react-intl\";\n\n/*********************\n * PAGINATION ********\n *********************/\n\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = \"Select Collection Type\"; \n\n/*********************\n * UI LABEL **********\n *********************/\nexport const SELECT = <FormattedMessage id='app.Select' />                                    //\nexport const NAME = <FormattedMessage id='app.Name' />\nexport const CREATEDBY = <FormattedMessage id='app.Created' />\nexport const LASTEDITED = <FormattedMessage id='app.lastedited' />\nexport const CREATEDEDITED = <FormattedMessage id='app.CreatedEdited' />\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    LASTEDITED: LASTEDITED,\n    CREATEDEDITED: CREATEDEDITED,\n}\n\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.Addnewcontent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS =  [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = 'No data available'","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst localeUrl = `${domain}/i18n/locales`\n\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    // const data = await axios.get(`${templateBaseUrl}`);\n    //TODO: Uncomment when using proper token system for template management.\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\nexport const TableBuilder = (tableMetaData) => {\n    console.log(\"tableMetaData =>\",tableMetaData);\n}\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    searchByKey = '';\n    return '-';\n}","import moment from 'moment';\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport { getKey } from '../helper/Helper';\nimport {  FormattedMessage } from \"react-intl\";\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n            templateChangedForContent: null,\n            templateSelectedForContent: 0,\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e, contentId) => {\n        // this.props.setTemplateId(e.target.value);\n        this.setState({ templateSelectedForContent: e.target.value })\n        this.setState({ templateChangedForContent: contentId });\n        const applyTemplateToContent = this.props.mappingOfContentTemplate.map(el => {\n            el.contentId === contentId && (el.templateId = e.target.value)\n            return el;\n        });\n        this.props.setContentTemplate(applyTemplateToContent);\n    }\n\n    onApplyToAll = () => {\n        document.getElementsByName('modelId').forEach((el) => { el.value = `${this.state.templateSelectedForContent}` })\n        const applyTemplateToAllContent = this.props.mappingOfContentTemplate.map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.props.setContentTemplate(applyTemplateToAllContent);\n    }\n\n    render() {\n        let parseSelectedContent = [];\n        if (typeof this.props.selectedContent === 'string') {\n            parseSelectedContent = JSON.parse(this.props.selectedContent);\n        } else {\n            parseSelectedContent = this.props.selectedContent;\n        }\n\n        return (\n            <>\n                <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr  className={this.props.decideToShowQuery() ? 'disabled-table' : ''}>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            parseSelectedContent.length > 0 && (\n                                parseSelectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            {/* {fetchTitleOrName(item)} */}\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td width=\"30%\">\n                                                <select defaultValue={'none'} style={{ display: \"inline-block\", width: \"50%\" }} name=\"modelId\" className=\"form-control\" onChange={(e) => this.onChangeTemplateId(e, item.id)}>\n                                                    {<FormattedMessage id='app.selectTemplate' >\n                                                        {(message) => <option value='none' disabled hidden>{message}</option>}\n                                                    </FormattedMessage>}\n                                                    {this.props.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                {item.id === this.state.templateChangedForContent && <div onClick={this.onApplyToAll} style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }}>\n                                                    <Link to=\"#\">\n                                                        <span className=\"fa fa-copy\" style={{ margin: \"0px 10px\" }}></span>\n                                                        Apply to all contents\n                                                    </Link>\n                                                </div>}\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.Name\" ,\n    createdAt: \"app.Created\",\n    updatedAt: \"app.lastedited\",\n    createDate: \"app.Createddate\",\n    selectDefaultTemplate: \"app.Selectdefaulttemplate\"  \n    // restirctions: \"Restrictions\"\n}","import {\n    Button, Col, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCollectionTypes, getTemplate } from '../api/Api';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport {  FormattedMessage, injectIntl } from \"react-intl\";\n\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_API_TARGET_URL}`;\n\nclass Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedContent: [],\n            // name: null,\n            // nameTwo: null,\n            collectionTypes: [],\n            // selectedContentId: 0,\n            // selectedTemplateId: 'default',\n            templateList: []\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        // this.setState({ selectedContent: selectedContentArr })\n        // this.setState({ name: selectedContentArr })\n        // this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        // this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n    }\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    decideToShowQuery = () => {\n        return (\n            this.props.selectedContentLabel && !this.props.selectedContent.length\n        )\n    }\n\n    onChangeTemplateId = (e) => {\n        this.props.SaveQueryHandler(\n            {\n                \"templateId\": e.target.value,\n                \"searchTerm\": this.props.searchTerm\n            }\n        );\n    }\n\n    render() {\n        console.log(\"Main this.props,\", this.props, \"Main this.state\",this.state);\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            \n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.ContentList\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                    <span><FormattedMessage id=\"app.Info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.Content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/configpage\">\n                                            <Button bsStyle=\"primary\"\n                                                onClick={() => (this.decideToShowQuery() || this.props.selectedContent.length) && this.props.manipulateIsEditable('edit')}\n                                            >\n                                                {this.props.selectedContent.length || this.decideToShowQuery() ? <FormattedMessage id='app.edit' /> : <FormattedMessage id='app.Addexistingcontent' />}\n                                                {!this.decideToShowQuery() && this.props.selectedContent.length > 0 && ' List of '}\n                                                {this.decideToShowQuery() ? <FormattedMessage id='app.query' /> : <FormattedMessage id='app.Content' />}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    // content={this.state.selectedContent}\n                                    selectedContent={this.props.selectedContent}\n                                    mappingOfContentTemplate={this.props.mappingOfContentTemplate}\n                                    setContentTemplate={this.props.setContentTemplate}\n                                    decideToShowQuery={this.decideToShowQuery}\n                                />\n                                {\n                                     (\n                                        <div className=\"form-horizontal SingleContentConfigForm custom-well well\">\n                                            <Row className=\"divider\">\n                                                <Col xs={2}>\n                                                    <span className=\"SectionTitle\" role=\"button\">\n                                                        <span><FormattedMessage id='app.Query' /></span>\n                                                    </span>\n                                                </Col>\n                                                <Col xs={10}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <span><b><FormattedMessage id='app.Selectdefaulttemplate' /></b></span>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            {this.decideToShowQuery() && <Row>\n                                                <Col xs={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                    Query Filter\n                                                </Col>\n                                                <Col xs={1} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                </Col>\n                                                <Col lg={6} style={{ border: \"1px solid lightgrey\", padding: \".2rem\" }}>\n                                                    <code>\n                                                        <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.props.selectedContentLabel} </span>\n                                                        <span style={{ color: \"#0088ce\" }}>\n                                                            { this.props.searchTerm && <b>WHERE Name =  </b>}\n                                                            { this.props.searchTerm && `%${this.props.searchTerm}% ` }\n                                                            {/* <b>WHERE Name =  </b> %{this.props.searchTerm}% */}\n                                                             <b>ORDER BY</b> creation date <b>DESC</b></span>\n                                                    </code>\n                                                </Col>\n                                                <Col lg={3}>\n                                                <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                <select defaultValue={'none'} style={{ display: \"inline-block\" }} name=\"modelId\" className=\"form-control\" onChange={(e)=>this.onChangeTemplateId(e)}>\n                                                    <option value=\"none\" disabled hidden>{this.props.intl.formatMessage({ id: \"app.selectTemplate\" })}</option>\n                                                    {this.state.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                </div>\n                                                </Col>\n                                            </Row>}\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n\n                </Row>\n            </form>\n        )\n    }\n}\n\nexport default injectIntl(Config);","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getContentDetailsByCollectionTypeAndId, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        this.props.setActiveTabKey(index);\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async () => {\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (this.props.collectionType && this.props.contentId) {\n            if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n                const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n                this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n                this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n                this.props.setActiveTabKey(0);\n            }\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.state.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import moment from 'moment';\nimport { Col, Grid, PaginationRow, Row, ListView, ListViewItem } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";          \n class MultiContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // PAGINATION STATE\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      searchBtnClk: false,\n\n      // MODAL STATE\n      show: false,\n      activeTabKey: 0,\n      contentDetailsOnModal: {},\n\n      // SEARCH STATE\n      searchQuery: '',\n      setSearchBy: '',\n\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: [],\n      contentIdForModal: '',\n      tempSelectedCollectionType: []\n    }\n    this.searchByKey = ''\n  }\n\n  componentDidMount = async () => {\n    this.populateConfigForm();\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n  }\n  \n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      if (this.props.searchText || this.searchByKey) {\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText ? this.props.searchText : this.state.searchQuery, this.props.colLabel, this.state.page, this.state.pageSize\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.shouldShowEtSaveBtn('visible');\n  }\n\n  populateConfigForm = async () => {\n    if (this.props.selectedCollectionTypeValue.value && this.props.selectedCollectionTypeValue.label) {\n      this.setState({ selectedCollectionType: [this.props.selectedCollectionTypeValue] })\n      if (this.props.searchText && this.props.colLabel) {\n        this.searchByKey = this.props.colLabel;\n        this.setState({searchQuery: this.props.searchText})\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText, this.props.colLabel, PAGE, PAGESIZE\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.props.selectedCollectionTypeValue.value)\n      }\n    }\n    if (this.props.selectedContentList.length) {\n      this.setState({selectedContent: this.props.selectedContentList})\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  stateUpdateOnFilterContentsByName(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true\n    });\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n    this.setState({ show: true, contentDetailsOnModal: content, contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    this.props.setQueryTerm('');\n    this.props.setFieldSearchBy('');\n    this.setState({ contents: [], selectedContent: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType, searchQuery: '' })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n    }\n    this.setState({ contentIdForModal: undefined });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n      setSearchBy: contentData && contentData.results.length && Object.keys(contentData.results[0])[1],\n      // selectedContent: [] // commented due to issue of clearing the cache of selected content.\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    // collectionType, query, searchBy\n    this.props.setFieldSearchBy(this.searchByKey);\n    if (this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n      );\n      this.stateUpdateOnFilterContentsByName(searchResult);\n    } else {\n      this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n    }\n  }\n\n  handleQueryChange = (e) => {\n    e.preventDefault();\n    this.props.setQueryTerm( e.target.value );\n    this.setState({ searchQuery: e.target.value })\n  }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  onContentSelect(content) {\n    if (!this.state.selectedContent.find(contentItem => (contentItem.id === content.id))) {\n      this.setState({ selectedContent: [content, ...this.state.selectedContent] })\n    } else {\n      const removedUnselectedContentId = this.state.selectedContent.filter(contentItem => contentItem.id !== content.id);\n      this.setState({ selectedContent: removedUnselectedContentId })\n    }\n  }\n\n\n  onContentListSaveHandler = () => {\n    this.props.setContentTemplate(this.state.selectedContent.map((el) => ({ ...el, contentId: el.id, templateId: null })))\n    this.props.setSelectedContentName(this.state.selectedCollectionType[0].value, this.state.selectedCollectionType[0].label, this.state.searchQuery)\n  }\n\n  checkIfSelected = (content) => {\n    if (this.state.selectedContent.length) {\n      const selectedItem = this.state.selectedContent.find(el => { return (el.id === content.id); })\n      if (selectedItem) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n   fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  isToEnableSaveQueryBtn() {\n    return !(this.state.selectedContent.length === 0 && this.state.contents && this.state.contents.length);\n  }\n\n   editMode = (key) => {\n     if (this.props.isEditable === 'edit' &&\n       Object.keys(this.props.selectedCollectionTypeValue).length\n       && this.props.selectedCollectionTypeValue.label\n       && this.props.selectedCollectionTypeValue.value\n     ) {  // keep in constant file\n       return this.props.selectedCollectionTypeValue[key]\n     }\n     return null\n   }\n\n  render() {\n    const pagination = {\n      page: this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n              <FormattedMessage id=\"app.ContentList\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b><FormattedMessage id=\"app.SelectCollectionType\" /></b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n              placeholder={this.props.intl.formatMessage({ id: \"app.SelectCollection\" })}          \n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        value={this.props.searchText}\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                       placeholder={this.props.intl.formatMessage({ id: \"app.SearchContentByName\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id='app.Search' /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                <table className=\"table dataTable table-striped table-bordered table-hover\">\n                  <thead>\n                    <tr>\n                      {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.contents.map(content => {\n                      return (\n                        <tr key={content.id}>\n                          <td width=\"5%\" align=\"center\">\n                            <input onChange={() => {\n                              this.onContentSelect(content); if (!this.state.selectedContent.length) {\n                                this.props.setQueryTerm('')\n                              }\n                            }}\n                              type=\"checkbox\" checked={this.checkIfSelected(content)} id={content + content.id} name=\"content\" value={content.id}\n                            />\n                          </td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                        </tr>)\n                    })}\n                  </tbody>\n                </table>\n                <div className=\"custom-page\"></div>\n                <PaginationRow\n                  itemCount={this.state.totalItems}\n                  itemsStart={itemsStart}\n                  itemsEnd={itemsEnd}\n                  viewType=\"table\"\n                  pagination={pagination}\n                  amountOfPages={this.state.lastPage}\n                  pageInputValue={this.state.currPageWillUpdating}\n                  onPageSet={this.changePage}\n                  onPerPageSelect={this.onPerPageSelect}\n                  onFirstPage={() => { this.setState({ searchBtnClk: false }); this.changePage(1) }}\n                  onPreviousPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page - 1) }}\n                  onPageInput={this.onPageInput}\n                  onNextPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page + 1) }}\n                  onLastPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.lastPage) }}\n                  onSubmit={this.onSubmit}\n                // messages={messages} i18n\n                />\n              </Col>\n            </Row>\n            {\n              <>\n                <Row className=\"mt-2\" >\n                  <Col sm={12}>\n                    <h6><b><FormattedMessage id='app.widgetConfiguration' /></b></h6>\n                  </Col>\n                </Row>\n                <Row className=\"mt-2\" >\n                  <Col sm={2}>\n                  <FormattedMessage id='app.QueryFilter' />\n                  </Col>\n                  <Col sm={10} className=\"queryBg\">\n                    <code>\n                      <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.state.selectedCollectionType[0].label} </span>\n                      <span style={{ color: \"#0088ce\" }}>\n                        {\n                          (this.state.searchQuery.length || this.props.searchText.length) > 0 && (<><b>WHERE Name = </b> %{this.state.searchQuery || this.props.searchText}% </>)\n                        }\n                        <b>ORDER BY</b> creation date <b>DESC</b>\n                      </span>\n                    </code>\n                  </Col>\n                </Row>\n              </>}\n            {this.state.selectedContent.length > 0 && this.state.selectedContent.map(content => {\n              return (\n                <Row className=\"mt-2\" key={content.id} style={{ borderBottom: \"1px solid lightgrey\", padding: \".5rem\" }}>\n                  <Col sm={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                    {this.fetchTitleOrName(content)}\n                  </Col>\n                  <Col sm={8}>\n                    {this.state.collectionType[0] && this.state.collectionType[0].label || this.state.selectedCollectionType && this.state.selectedCollectionType[0].label}\n                  </Col>\n                  <Col sm={2} className={\"SingleContentConfigFormBody__addButtons\"}>\n                    <button className=\"btn\" onClick={()=>this.onContentSelect(content)}><FormattedMessage id='app.Remove' /></button>\n                  </Col>\n                </Row>\n              )\n            })}\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={6}>\n              </Col>\n              <Col sm={6} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n\n                  <button className=\"btn-default btn\"\n                    onClick={() => this.props.setSelectedContentName(this.editMode('value'), this.editMode('label'))}>\n                    <FormattedMessage id='app.Cancel' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={this.isToEnableSaveQueryBtn()}>\n                    <FormattedMessage id='app.SaveAsQuery' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={!this.state.selectedContent.length}>\n                    <FormattedMessage id='app.SaveAsListOfContents'/>\n                  </button>\n\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey} />\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(MultiContentList);                                 ","export default {\n    'app.ContentList': 'Content List',\n    'app.SelectCollectionType': 'Select Collection Type',\n    'app.Info':'Info',\n    'app.Content': 'Content',\n    'app.Name':'Name',\n    'app.Created':'Created by',\n    'app.lastedited':'Last edited',\n    'app.Createddate':'Created date',\n    'app.Selectdefaulttemplate':'Select default template*',\n    'app.Addexistingcontent':'Add existing ',\n    'app.Addnewcontent':'Add new content',  \n    'app.Select':'Select',\n    'app.SelectCollection':'Select Collection Type',\n    'app.widgetConfiguration':'Widget Configuration',\n    'app.QueryFilter':'Query Filter',\n    'app.Cancel':'Cancel',\n    'app.SaveAsQuery':'Save as Query',\n    'app.SaveAsListOfContents':'Save as list of Contents',\n    'app.Select':'Select',\n    'app.LastEdited':'Last Edited',\n    'app.CreatedEdited':'Created Edited',\n    'app.SearchContentByName':'Search Content By Name',\n    'app.Remove':'Remove',\n    'app.Query':'Query',\n    'app.selectTemplate':'Select Template',\n    'app.edit':'Edit',\n    'app.query':' Query Filter',\n    'app.Search':'Search'\n    \n    }\n\n\n   ","export default {\n    'app.ContentList': 'Content Elenco',\n    'app.SelectCollectionType': 'Seleziona Tipo di raccolta',\n    'app.Info':'Informazioni',\n    'app.Content': 'Contenuto',\n    'app.Name':'Nome',\n    'app.Created':'Creata da',\n    'app.lastedited':'Ultima modifica',\n    'app.Createddate':'Creata Data',\n    'app.Selectdefaulttemplate':'Seleziona il modello predefinito*',\n    'app.Addexistingcontent':'Aggiungi contenuto esistente',\n    'app.Addnewcontent':'Aggiungi nuovo contenuto',\n    'app.Select':'Seleziona',\n    'app.SelectCollection':'Seleziona Contenuto',\n    'app.widgetConfiguration':'Configurazione del widget',\n    'app.QueryFilter':'Filtro di query',\n    'app.Cancel':'Annulla',\n    'app.SaveAsQuery':'Salva come query',\n    'app.SaveAsListOfContents':'Salva come elenco di contenuti',\n    'app.Select':'Selezionare',\n    'app.LastEdited':'Ultima modifica',\n    'app.CreatedEdited':'Creato Modificato',\n    'app.SearchContentByName':'Cerca contenuto per nome',\n    'app.Remove':'Rimuovere',\n    'app.Query':'Domanda',\n    'app.selectTemplate':'Seleziona Modello',\n    'app.edit':'modificare',\n    'app.query':'Filtro di query',\n    'app.Search':'Ricerca'\n    }\n\n    //'app.Content': 'Contenuto',","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { IntlProvider } from \"react-intl\";\nimport Config from './page/Config';\nimport MultiContentList from './page/MultiContentList';\n\nimport en from \"./en.js\";\nimport it from \"./it.js\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentName: null,\n            mappingOfContentTemplate: [],\n            contentIdAndTemplateId: '',\n            selectedCollectionType: null,\n            searchText: '',\n            saveQuery: '',\n            colLabel: '',\n            locale:'en',\n            messages:{ en, it },\n            isEditable: '',\n        };\n    }\n\n    componentDidMount = () => {\n        this.setLocale();\n    }\n\n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContentTemplate = (data) => {\n        const getJsonString = JSON.stringify(data.map(el => ({ templateId: el.templateId, contentId: el.contentId })));\n        this.setState({ mappingOfContentTemplate: data, contentIdAndTemplateId: encodeURI(getJsonString) });\n    }\n\n    setSelectedContentName = (contentName, contentLabel) => {\n        this.setState({ selectedContentName: contentName, selectedCollectionType: contentLabel })\n    }\n\n    setQueryTerm = (searchTerm) => {\n        this.setState({ searchText: searchTerm })\n    }\n\n    SaveQueryHandler = (saveQueryData) => {\n        this.setState({ saveQuery: encodeURI(JSON.stringify(saveQueryData)) });\n    }\n\n    setFieldSearchBy = (fieldSearchWith) => {\n        this.setState({ colLabel: fieldSearchWith })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    manipulateIsEditable = (value) => this.setState({ isEditable: value });\n\n    render() {\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.state.messages[this.state.locale]}>\n                <>\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config\n                                    selectedContent={this.state.mappingOfContentTemplate}\n                                    mappingOfContentTemplate={this.state.mappingOfContentTemplate}\n                                    setContentTemplate={this.setContentTemplate}\n                                    selectedContentLabel={this.state.selectedCollectionType}\n                                    searchTerm={this.state.searchText}\n                                    SaveQueryHandler={this.SaveQueryHandler}\n                                    selectedContentName={this.state.selectedContentName}\n                                    manipulateIsEditable={this.manipulateIsEditable}\n                                />\n                            </Route>\n                            <Route path='/configpage' exact>\n                                <MultiContentList\n                                    setContentTemplate={this.setContentTemplate}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    setQueryTerm={this.setQueryTerm}\n                                    setFieldSearchBy={this.setFieldSearchBy}\n                                    searchText={this.state.searchText}\n                                    selectedCollectionTypeValue={{ label: this.state.selectedCollectionType, value: this.state.selectedContentName }}\n                                    selectedContentList={this.state.mappingOfContentTemplate}\n                                    colLabel={this.state.colLabel}\n                                    isEditable={this.state.isEditable}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass WidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        // this.render()\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n}\n\ncustomElements.get('list-content-widget-config') || customElements.define('list-content-widget-config', WidgetElement);\n\nexport default WidgetElement;\n"],"sourceRoot":""}