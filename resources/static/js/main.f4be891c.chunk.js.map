{"version":3,"sources":["helper/Constant.js","api/Api.js","MockClientPaginationTable.js","ui/ExpandCollapse.js","helper/Helper.js","ui/MockModalManager.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/MultiContentList.js","App.js","custom-element/et-app.js"],"names":["PERPAGEOPTIONS","SELECT_COLLECTION_TYPE","NAME","T_HEADING","SELECT","CREATEDBY","LASTEDITED","CREATEDEDITED","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","domain","process","templateBaseUrl","rootAdminEndPoint","sortByCreateDateByDescOrder","localeUrl","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","data","getContents","collectionType","page","pageSize","url","getLocales","fetchContents","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","headers","config","defaultOptions","mockRows","MockClientPaginationTable","props","totalPages","perPage","state","pagination","Math","ceil","length","onPageInput","e","setState","pageChangeValue","target","value","onSubmit","setPage","Number","isNaN","newPaginationState","Object","assign","onPerPageSelect","eventKey","onFirstPage","onPreviousPage","onNextPage","onLastPage","onSelectRow","event","row","updatedSelectedRows","updatedRow","onRowsLogger","rows","selectedRows","selectedRowIndex","findIndex","r","id","selected","filter","deselectRow","push","selectRow","onSelectAllRows","checked","currentRows","updatedSelections","Set","map","updatedRows","indexOf","ids","onRow","rowIndex","setSelectedContent","selectedCollectionType","className","classNames","role","getSortingColumns","sortingColumns","sortableTransform","sort","onSort","selectedColumn","sortingOrder","defaultSortingOrder","strategy","byProperty","sortingFormatter","customHeaderFormatters","customHeaderFormattersDefinition","selectedContent","name","direction","TABLE_SORT_DIRECTION","ASC","position","columns","property","displayName","header","label","index","rowSpan","colSpan","transforms","formatters","customFormatters","sortableHeaderCellFormatter","cell","rowData","selectionCellFormatter","tableCellFormatter","perPageOptions","this","prevProps","prevState","compose","paginate","orderBy","sortedPaginatedRows","fluid","PfProvider","striped","bordered","hover","dataTable","components","cellProps","Header","headerRows","resolve","Body","rowKey","viewType","PAGINATION_VIEW","TABLE","pageInputValue","amountOfPages","itemCount","itemsStart","itemsEnd","React","Component","ExpandCollapse","handleSubmit","preventDefault","runOnFilterData","values","handleInputChange","onClick","open","tabIndex","style","margin","display","type","onChange","placeholder","getKey","content","keys","item","toLowerCase","allowedKeys","includes","searchByKey","SimpleTable","renderToggleButton","isMenuShown","height","top","right","border","onChangeTemplateId","templateSelectedForContent","templateChangedForContent","applyTemplateToContent","mappingOfContentTemplate","el","templateId","setContentTemplate","onApplyToAll","document","getElementsByName","forEach","applyTemplateToAllContent","toString","templateType","selectedTemplateType","parseSelectedContent","JSON","parse","decideToShowQuery","contentAttribute","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","width","defaultValue","disabled","hidden","templateList","templateName","textAlign","to","Title","createdAt","createDate","selectDefaultTemplate","strapiDomain","Config","selectedContentArr","selectedContenttype","handleTypeaheadChangeContentType","selectedContentType","option","componentDidMount","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","element","info","pluralName","selectedContentName","templatesList","collectionTypes","handleAddNewContent","strapiContentManagerUrl","newWindow","window","focus","selectedContentLabel","SaveQueryHandler","searchTerm","bind","xs","title","bsStyle","marginTop","setTemplateId","borderRight","lg","padding","color","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","checkIfComponent","dataObj","arr","split","replace","Array","isArray","theKey","theIndex","Panel","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","renderAccordionData","toggle","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","activeTabKey","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","componentDidUpdate","show","collectionAttributes","dummyData","dialogClassName","onHide","fetchTitleOrName","activeKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","MultiContentList","populateConfigForm","setCollectionTypeState","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","getContentsByCollectionType","searchText","selectedCollectionTypeValue","searchQuery","colLabel","searchResult","stateUpdateOnFilterContentsByName","componentWillUnmount","selectedContentList","btnVisibility","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","setQueryTerm","setFieldSearchBy","contents","collType","setSelectedContentName","contentData","results","lastPage","pageCount","totalItems","total","setSearchBy","onContentSearch","handleQueryChange","onContentListSaveHandler","checkIfSelected","find","editMode","collectionTypeApiData","singularName","contentItem","removedUnselectedContentId","min","options","toggleMenu","align","onContentSelect","onPageSet","changePage","sm","borderBottom","isToEnableSaveQueryBtn","App","getJsonString","stringify","contentIdAndTemplateId","encodeURI","contentName","contentLabel","saveQueryData","saveQuery","fieldSearchWith","path","exact","WidgetElement","reactRootRef","createRef","mountPoint","current","createElement","appendChild","ReactDOM","render","ref","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.f4be891c.chunk.js","sourcesContent":["/*********************\n * PAGINATION ********\n *********************/\n\nimport { locale } from \"moment\";\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = \"Select Collection Type\";\n\n/*********************\n * UI LABEL **********\n *********************/\nexport const SELECT = \"Select\";\nexport const NAME = \"Name\";\nexport const CREATEDBY = \"Created by\";\nexport const LASTEDITED = \"Last edited\";\nexport const CREATEDEDITED = \"Created date\";\n\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    LASTEDITED: LASTEDITED,\n    CREATEDEDITED: CREATEDEDITED,\n}\n\nexport const BTN_ADD_NEW_CONTENT = 'Add new content';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS =  [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = 'No data available'","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst localeUrl = `${domain}/i18n/locales`\n\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    // const data = await axios.get(`${templateBaseUrl}`);\n    //TODO: Uncomment when using proper token system for template management.\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import classNames from 'classnames';\nimport { orderBy } from 'lodash';\nimport {\n    customHeaderFormattersDefinition,\n    defaultSortingOrder, Grid, paginate, PaginationRow,\n    PAGINATION_VIEW, selectionCellFormatter, sortableHeaderCellFormatter,\n    Table, tableCellFormatter, TABLE_SORT_DIRECTION\n} from 'patternfly-react';\nimport React from 'react';\nimport { compose } from 'react-recompose';\nimport * as sort from 'sortabular';\nimport * as resolve from 'table-resolver';\n\nconst mockRows = [\n    // {\n    //     additions: 272635,\n    //     commits: 711,\n    //     name: 'Dan',\n    //     gender: 'male',\n    //     id: 0,\n    //     eye_color: 'Blue',\n    //     location: 'London, UK',\n    //     username: 'gaearon',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 203610,\n    //     commits: 476,\n    //     name: 'Sebastian',\n    //     gender: 'male',\n    //     id: 1,\n    //     eye_color: 'Green',\n    //     location: 'San Francisco, CA',\n    //     username: 'sebmarkbage',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Sophie',\n    //     gender: 'female',\n    //     id: 2,\n    //     eye_color: 'Grey',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Vijay',\n    //     gender: 'male',\n    //     id: 3,\n    //     eye_color: 'dark brown',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Sachin',\n    //     gender: 'male',\n    //     id: 4,\n    //     eye_color: 'dark brown',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Kamlesh',\n    //     gender: 'male',\n    //     id: 5,\n    //     eye_color: 'White',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // },\n    // {\n    //     additions: 114467,\n    //     commits: 828,\n    //     name: 'Tushar',\n    //     gender: 'male',\n    //     id: 6,\n    //     eye_color: 'Gold',\n    //     location: 'California',\n    //     username: 'sophiebits',\n    //     state: 'UK'\n    // }\n]\n\nexport class MockClientPaginationTable extends React.Component {\n    static selectRow(row) {\n        return Object.assign({}, row, { selected: true });\n    }\n    static deselectRow(row) {\n        return Object.assign({}, row, { selected: false });\n    }\n\n    constructor(props) {\n        super(props);\n\n        const getSortingColumns = () => this.state.sortingColumns || {};\n\n        const sortableTransform = sort.sort({\n            getSortingColumns,\n            onSort: selectedColumn => {\n                this.setState({\n                    sortingColumns: sort.byColumn({\n                        sortingColumns: this.state.sortingColumns,\n                        sortingOrder: defaultSortingOrder,\n                        selectedColumn\n                    })\n                });\n            },\n            // Use property or index dependening on the sortingColumns structure specified\n            strategy: sort.strategies.byProperty\n        });\n\n        const sortingFormatter = sort.header({\n            sortableTransform,\n            getSortingColumns,\n            strategy: sort.strategies.byProperty\n        });\n\n        // enables our custom header formatters extensions to reactabular\n        this.customHeaderFormatters = customHeaderFormattersDefinition;\n\n        this.state = {\n            // selectedContent \n            selectedContent: [],\n\n            // Sort the first column in an ascending way by default.\n            sortingColumns: {\n                name: {\n                    direction: TABLE_SORT_DIRECTION.ASC,\n                    position: 0\n                }\n            },\n\n            // column definitions\n            columns: [\n                {\n                    property: 'select',\n                    displayName: 'Select',\n                    header: {\n                        label: 'select',\n                        props: {\n                            index: 0,\n                            rowSpan: 1,\n                            colSpan: 1,\n                            id: 'select'\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                        // customFormatters: [selectionHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 0\n                        },\n                        formatters: [\n                            (value, { rowData, rowIndex }) => {\n                                return selectionCellFormatter(\n                                    { rowData, rowIndex },\n                                    this.onSelectRow,\n                                    `vybrat ${rowIndex}`, `vyberte řádek ${rowIndex}`\n                                );\n                            }\n                        ]\n                    }\n                },\n                {\n                    property: 'Title',\n                    displayName: 'Names',\n                    header: {\n                        label: 'Name',\n                        props: {\n                            index: 1,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 1\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'createdBy',\n                    header: {\n                        label: 'Created by',\n                        props: {\n                            index: 2,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 2\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'updatedAt',\n                    header: {\n                        label: 'Last edited',\n                        props: {\n                            index: 3,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 3\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'Type',\n                    header: {\n                        label: 'Type',\n                        props: {\n                            index: 4,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 4\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'createdAt',\n                    header: {\n                        label: 'Created date',\n                        props: {\n                            index: 5,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 5\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                },\n                {\n                    property: 'status',\n                    header: {\n                        label: 'Status',\n                        props: {\n                            index: 6,\n                            rowSpan: 1,\n                            colSpan: 1\n                        },\n                        transforms: [sortableTransform],\n                        formatters: [sortingFormatter],\n                        customFormatters: [sortableHeaderCellFormatter]\n                    },\n                    cell: {\n                        props: {\n                            index: 6\n                        },\n                        formatters: [tableCellFormatter]\n                    }\n                }\n                // {\n                //     property: 'actions',\n                //     header: {\n                //         label: 'Actions',\n                //         props: {\n                //             index: 7,\n                //             rowSpan: 1,\n                //             colSpan: 2\n                //         },\n                //         formatters: [actionHeaderCellFormatter]\n                //     },\n                //     cell: {\n                //         props: {\n                //             index: 7\n                //         },\n                //         formatters: [\n                //             (value, { rowData }) => {\n                //                 // console.log(\"npm i react-recompose\", rowData);\n                //                 return [\n                //                     <Table.Actions key=\"0\">\n                //                         <Table.Button\n                //                             onClick={() => alert('clicked ' + rowData.name)}\n                //                         >\n                //                             Actions\n                //                         </Table.Button>\n                //                     </Table.Actions>,\n                //                     <Table.Actions key=\"1\">\n                //                         <Table.DropdownKebab id=\"myKebab\" pullRight>\n                //                             <MenuItem>Action</MenuItem>\n                //                             <MenuItem>Another Action</MenuItem>\n                //                             <MenuItem>Something else here</MenuItem>\n                //                             <MenuItem divider />\n                //                             <MenuItem>Separated link</MenuItem>\n                //                         </Table.DropdownKebab>\n                //                     </Table.Actions>\n                //                 ];\n                //             }\n                //         ]\n                //     }\n                // }\n            ],\n\n            // rows and row selection state\n            rows: this.props.mockRows,\n            \n            // const [reloadToken, setReloadToken] = useState(((new Date()).getTime()).toString())\n\n            selectedRows: [],\n\n            // pagination default states\n            pagination: {\n                page: 1,\n                perPage: 6,\n                perPageOptions: [6, 10, 15]\n            },\n\n            // page input value\n            pageChangeValue: 1\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.mockRows) {\n            this.setState({ rows: this.props.mockRows })\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.mockRows !== prevProps.mockRows)\n            this.setState({ rows: this.props.mockRows })\n    }\n\n    totalPages = () => {\n        const { perPage } = this.state.pagination;\n        return Math.ceil(mockRows.length / perPage);\n    };\n    onPageInput = e => {\n        this.setState({ pageChangeValue: e.target.value });\n    };\n    onSubmit = () => {\n        this.setPage(this.state.pageChangeValue);\n    };\n    setPage = value => {\n        const page = Number(value);\n        if (\n            !Number.isNaN(value) &&\n            value !== '' &&\n            page > 0 &&\n            page <= this.totalPages()\n        ) {\n            let newPaginationState = Object.assign({}, this.state.pagination);\n            newPaginationState.page = page;\n            this.setState({ pagination: newPaginationState, pageChangeValue: page });\n        }\n    }\n    onPerPageSelect = (eventKey, e) => {\n        let newPaginationState = Object.assign({}, this.state.pagination);\n        newPaginationState.perPage = eventKey;\n        newPaginationState.page = 1;\n        this.setState({ pagination: newPaginationState });\n    };\n    onFirstPage = () => {\n        this.setPage(1);\n    };\n    onPreviousPage = () => {\n        if (this.state.pagination.page > 1) {\n            this.setPage(this.state.pagination.page - 1);\n        }\n    };\n    onNextPage = () => {\n        const { page } = this.state.pagination;\n        if (page < this.totalPages()) {\n            this.setPage(this.state.pagination.page + 1);\n        }\n    };\n    onLastPage = () => {\n        const { page } = this.state.pagination;\n        const totalPages = this.totalPages();\n        if (page < totalPages) {\n            this.setPage(totalPages);\n        }\n    };\n    onSelectRow = (event, row) => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const selectedRowIndex = rows.findIndex(r => r.id === row.id);\n        if (selectedRowIndex > -1) {\n            let updatedSelectedRows, updatedRow;\n            if (row.selected) {\n                updatedSelectedRows = selectedRows.filter(r => !(r === row.id));\n                updatedRow = MockClientPaginationTable.deselectRow(row);\n            } else {\n                selectedRows.push(row.id);\n                updatedSelectedRows = selectedRows;\n                updatedRow = MockClientPaginationTable.selectRow(row);\n            }\n            rows[selectedRowIndex] = updatedRow;\n            this.setState({\n                rows: rows,\n                selectedRows: updatedSelectedRows\n            });\n            onRowsLogger(rows.filter(r => r.selected));\n        }\n    };\n    onSelectAllRows = event => {\n        const { onRowsLogger } = this.props;\n        const { rows, selectedRows } = this.state;\n        const checked = event.target.checked;\n        const currentRows = this.currentRows().rows;\n\n        if (checked) {\n            const updatedSelections = [\n                ...new Set([...currentRows.map(r => r.id), ...selectedRows])\n            ];\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? MockClientPaginationTable.selectRow(r) : r;\n            });\n            this.setState({\n                // important: you must update rows to force a re-render and trigger onRow hook\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        } else {\n            const ids = currentRows.map(r => r.id);\n            const updatedSelections = selectedRows.filter(r => {\n                return !(ids.indexOf(r) > -1);\n            });\n            const updatedRows = rows.map(r => {\n                return updatedSelections.indexOf(r.id) > -1 ? r : MockClientPaginationTable.deselectRow(r);\n            });\n            this.setState({\n                rows: updatedRows,\n                selectedRows: updatedSelections\n            });\n            onRowsLogger(updatedRows.filter(r => r.selected));\n        }\n    };\n    currentRows() {\n        const { rows, sortingColumns, columns, pagination } = this.state;\n        return compose(\n            paginate(pagination),\n            sort.sorter({\n                columns: columns,\n                sortingColumns,\n                sort: orderBy,\n                strategy: sort.strategies.byProperty\n            })\n        )(rows);\n    }\n    // TODO:\n    onRow = (row, { rowIndex }) => {\n        // IMP: Need to figure it out\n        // const { selectedRows } = this.state;\n        // IMP: For now remove later\n        this.props.setSelectedContent([row], this.props.selectedCollectionType)\n        // this.setState({ selectedContent: [row] });\n        const selectedRows = mockRows\n\n        const selected = selectedRows.indexOf(row.id) > -1;\n        return {\n            className: classNames({ selected: selected }),\n            role: 'row'\n        };\n    }\n    render() {\n        const { columns, pagination, sortingColumns, pageChangeValue } = this.state;\n        const sortedPaginatedRows = this.currentRows();\n\n        return (\n            <Grid fluid>\n                <Table.PfProvider\n                    striped\n                    bordered\n                    hover\n                    dataTable\n                    columns={columns}\n                    components={{\n                        header: {\n                            cell: cellProps => {\n                                return this.customHeaderFormatters({\n                                    cellProps,\n                                    columns,\n                                    sortingColumns,\n                                    rows: sortedPaginatedRows.rows,\n                                    onSelectAllRows: this.onSelectAllRows\n                                });\n                            }\n                        }\n                    }}\n                >\n                    <Table.Header headerRows={resolve.headerRows({ columns })} />\n                    <Table.Body\n                        rows={sortedPaginatedRows.rows}\n                        rowKey=\"id\"\n                        onRow={this.onRow}\n                    />\n                </Table.PfProvider>\n                <PaginationRow\n                    viewType={PAGINATION_VIEW.TABLE}\n                    pagination={pagination}\n                    pageInputValue={pageChangeValue}\n                    amountOfPages={sortedPaginatedRows.amountOfPages}\n                    itemCount={sortedPaginatedRows.itemCount}\n                    itemsStart={sortedPaginatedRows.itemsStart}\n                    itemsEnd={sortedPaginatedRows.itemsEnd}\n                    onPerPageSelect={this.onPerPageSelect}\n                    onFirstPage={this.onFirstPage}\n                    onPreviousPage={this.onPreviousPage}\n                    onPageInput={this.onPageInput}\n                    onNextPage={this.onNextPage}\n                    onLastPage={this.onLastPage}\n                    onSubmit={this.onSubmit}\n                />\n            </Grid>\n        );\n    }\n}\n\n// MockClientPaginationTable.propTypes = {\n//     onRowsLogger: PropTypes.func.isRequired\n// };\n\n","import React from \"react\";\n\nclass ExpandCollapse extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            values: {\n                name: ''\n            }\n        };\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.runOnFilterData(this.state.values.name);\n    };\n\n    handleInputChange = (event) => {\n        this.setState({\n            values: { [event.target.name]: event.target.value },\n        });\n    };\n\n    onClick = () => {\n        this.setState({ open: !this.state.open })\n    }\n\n    handleKeyDown() {\n\n    }\n\n    render() {\n        return (\n            <div\n                className=\"ContentsFilter well\"\n                role=\"button\"\n                tabIndex={0}\n                style={{ margin: '1rem 0rem' }}\n            >\n                <form onSubmit={this.handleSubmit}>\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                        <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">Name <span className=\"caret\"></span></button>\n                        <input\n                            type=\"search\"\n                            name=\"name\"\n                            value={this.state.values.name}\n                            onChange={this.handleInputChange}\n                            role=\"combobox\"\n                            className=\"rbt-input-main form-control rbt-input\"\n                            placeholder=\"Search Content\"\n                        />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                        <button className=\"btn btn-primary\">Search</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ExpandCollapse;\n\n// <span className={`icon fa fa-chevron-${true ? 'down' : 'right'} CollapsibleSection__title-collapse-button`} />","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\nexport const TableBuilder = (tableMetaData) => {\n    console.log(\"tableMetaData =>\",tableMetaData);\n}\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    searchByKey = '';\n    return '-';\n}","import { Button, Col, Row, Modal, Icon } from 'patternfly-react';\nimport React, { Component, Fragment } from 'react'\nimport { fetchContents, filterContentsByName, getCollectionTypes } from '../api/Api'\nimport { MockClientPaginationTable } from '../MockClientPaginationTable'\nimport ExpandCollapse from './ExpandCollapse'\nimport './MockModalManager.css'\n\nexport default class MockModalManager extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { show: false, collectionTypes: [], mockRows: [], selectedContent: [], selectedCollectionType: null };\n    }\n\n    // TODO: mockRows\n    runOnFilterData = async (contentName) => {\n        await filterContentsByName(this.state.selectedCollectionType, contentName).then(response => {\n            const arr = response.data.data.map(el => {\n                el.attributes.id = el.id\n                el.attributes.createdBy = 'Admin';\n                el.attributes.status = 'Published';\n                return el.attributes\n            })\n            this.setState({ mockRows: arr });\n        });\n    }\n\n    componentDidMount = () => {\n    }\n\n    close = () => {\n        this.setState({ show: false })\n    }\n\n    open = async () => {\n        this.setState({ show: true })\n\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push(element.info)\n        });\n        this.setState({ collectionTypes: contentTypeRefine })\n    }\n\n    collectionTypeOnChange = (e) => {\n        e.persist()\n        this.state.collectionTypes.forEach(async (el) => {\n            if (el.singularName === e.target.value && e.target.value) {\n                this.setState({ selectedCollectionType: el.pluralName })\n                await fetchContents(el.pluralName).then(response => {\n                    const arr = response.data.data.map(el => {\n                        el.attributes.id = el.id\n                        el.attributes.createdBy = 'Admin';\n                        el.attributes.status = 'Published';\n                        // el.attributes.type = el.singularName;\n                        return el.attributes\n                    })\n                    this.setState({ mockRows: arr });\n                });\n            }\n        })\n    }\n\n    render() {\n        // TODO:\n        return (\n            <Fragment>\n                <div>\n                    {/* TODO: Add existing content need to beremoved later */}\n                {/* <div className=\"row\" style={{marginLeft: \"0px\", marginRight: \"0px\"}}>\n                    <Col xs={6}>\n                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                            Content: -\n                        </h3>\n                    </Col>\n                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                        <Button\n                            className=\"ChooseContentBody__add--existing app-tour-step-18\"\n                            bsStyle=\"primary\"\n                            onClick={this.open}\n                        >\n                            Add existing content\n                        </Button>\n                    </Col>\n                </div> */}\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.state.show} onHide={this.close}>\n                    <Modal.Header>\n                        <button\n                            className=\"close\"\n                            onClick={this.close}\n                            aria-hidden=\"true\"\n                            aria-label=\"Close\"\n                        >\n                            <Icon type=\"pf\" name=\"close\" />\n                        </button>\n                        <Modal.Title>Select one content item</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            // onClick={onClick}\n                            // onKeyDown={handleKeyDown}\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                            {/* {<span>{name}</span> || (\n                                <FormattedMessage id={nameId} defaultMessage=\"Info\" />\n                            )} */}\n\n                        </div>\n                        <Row>\n                            <label className=\"control-label col-xs-3\" htmlFor=\"group\">\n                                {/* <FormattedMessage id=\"user.authority.groups\" /> */}Collection Type\n                            </label>\n                            <Col xs={9}>\n                                <select\n                                    className=\"form-control\"\n                                    name=\"group\"\n                                    data-testid={\"TEST_ID_USER_AUTHORITY_MODAL.GROUP_FIELD\"}\n                                    onChange={this.collectionTypeOnChange}\n                                >\n                                    <option value={0}>Select Collection Type</option>\n                                    {\n                                        this.state.collectionTypes.length && this.state.collectionTypes.map((collectionType, idx) => {\n                                            return (\n                                                <option key={collectionType.singularName} value={collectionType.singularName}>{collectionType.pluralName}</option>\n                                            )\n                                        })\n                                    }\n                                </select>\n                            </Col>\n                        </Row>\n                        <ExpandCollapse runOnFilterData={this.runOnFilterData} />\n\n                        {/* </FormGroup> */}\n                        <MockClientPaginationTable\n                            onRowsLogger={function noRefCheck() { }}\n                            mockRows={this.state.mockRows}\n                            selectedCollectionType={this.state.selectedCollectionType}\n                            setSelectedContent={this.props.setSelectedContent}\n                            />\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            bsStyle=\"default\"\n                            className=\"btn-cancel\"\n                            onClick={this.close}\n                            >\n                            Cancel\n                        </Button>\n                        <Button bsStyle=\"primary\" onClick={this.close}>\n                            Choose\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n                            </div>\n            </Fragment>\n        )\n    }\n}\n","import moment from 'moment';\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport { getKey } from '../helper/Helper';\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n            templateChangedForContent: null,\n            templateSelectedForContent: 0,\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e, contentId) => {\n        // this.props.setTemplateId(e.target.value);\n        this.setState({ templateSelectedForContent: e.target.value })\n        this.setState({ templateChangedForContent: contentId });\n        const applyTemplateToContent = this.props.mappingOfContentTemplate.map(el => {\n            el.contentId === contentId && (el.templateId = e.target.value)\n            return el;\n        });\n        this.props.setContentTemplate(applyTemplateToContent);\n    }\n\n    onApplyToAll = () => {\n        document.getElementsByName('modelId').forEach((el) => { el.value = `${this.state.templateSelectedForContent}` })\n        const applyTemplateToAllContent = this.props.mappingOfContentTemplate.map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.props.setContentTemplate(applyTemplateToAllContent);\n    }\n\n    render() {\n        let parseSelectedContent = [];\n        if (typeof this.props.selectedContent === 'string') {\n            parseSelectedContent = JSON.parse(this.props.selectedContent);\n        } else {\n            parseSelectedContent = this.props.selectedContent;\n        }\n\n        return (\n            <>\n                <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr  className={this.props.decideToShowQuery() && 'disabled-table'}>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}>{contentAttribute[item]}</th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            parseSelectedContent.length > 0 && (\n                                parseSelectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            {/* {fetchTitleOrName(item)} */}\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td width=\"30%\">\n                                                <select defaultValue={'none'} style={{ display: \"inline-block\", width: \"50%\" }} name=\"modelId\" className=\"form-control\" onChange={(e) => this.onChangeTemplateId(e, item.id)}>\n                                                    <option value=\"none\" disabled hidden>Select Template</option>\n                                                    {/* <option value=\"1\">Select Template </option> */}\n                                                    {this.props.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                {item.id === this.state.templateChangedForContent && <div onClick={this.onApplyToAll} style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }}>\n                                                    <Link to=\"#\">\n                                                        <span className=\"fa fa-copy\" style={{ margin: \"0px 10px\" }}></span>\n                                                        Apply to all contents\n                                                    </Link>\n                                                </div>}\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"Name\",\n    createdAt: \"Created by\",\n    updatedAt: \"Last edited\",\n    createDate: \"Created date\",\n    selectDefaultTemplate: \"Select default template *\"\n    // restirctions: \"Restrictions\"\n}","import {\n    Button, Col, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCollectionTypes, getTemplate } from '../api/Api';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nimport MockModalManager from '../ui/MockModalManager';\nimport { SimpleTable } from '../ui/SimpleTable';\n\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_API_TARGET_URL}`;\n\nexport default class Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedContent: [],\n            // name: null,\n            // nameTwo: null,\n            collectionTypes: [],\n            // selectedContentId: 0,\n            // selectedTemplateId: 'default',\n            templateList: []\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        // this.setState({ selectedContent: selectedContentArr })\n        // this.setState({ name: selectedContentArr })\n        // this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        // this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n    }\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    decideToShowQuery = () => {\n        return (\n            this.props.selectedContentLabel && !this.props.selectedContent.length\n        )\n    }\n\n    onChangeTemplateId = (e) => {\n        this.props.SaveQueryHandler(\n            {\n                \"templateId\": e.target.value,\n                \"searchTerm\": this.props.searchTerm\n            }\n        );\n    }\n\n    render() {\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\">Content List</h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                    <span>Info</span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                            Contents :-\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/configpage\">\n                                            <Button bsStyle=\"primary\">\n                                                {this.props.selectedContent.length || this.decideToShowQuery() ? 'Edit' : 'Add existing'} {!this.decideToShowQuery() && this.props.selectedContent.length > 0 && ' List of '} {this.decideToShowQuery() ? 'query' : 'content'}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                {/* Not in use MockModalManager */}\n                                {/* <MockModalManager rightSide={false} setSelectedContent={this.setSelectedContent} /> */}\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    // content={this.state.selectedContent}\n                                    selectedContent={this.props.selectedContent}\n                                    mappingOfContentTemplate={this.props.mappingOfContentTemplate}\n                                    setContentTemplate={this.props.setContentTemplate}\n                                    decideToShowQuery={this.decideToShowQuery}\n                                />\n                                {\n                                     (\n                                        <div className=\"form-horizontal SingleContentConfigForm custom-well well\">\n                                            <Row className=\"divider\">\n                                                <Col xs={2}>\n                                                    <span className=\"SectionTitle\" role=\"button\">\n                                                        <span>Query</span>\n                                                    </span>\n                                                </Col>\n                                                <Col xs={10}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <span><b>Select default template*</b></span>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            {/* <hr /> */}\n                                            {this.decideToShowQuery() && <Row>\n                                                <Col xs={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                    Query Filter\n                                                </Col>\n                                                <Col xs={1} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                </Col>\n                                                <Col lg={6} style={{ border: \"1px solid lightgrey\", padding: \".2rem\" }}>\n                                                    <code>\n                                                        <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.props.selectedContentLabel} </span>\n                                                        <span style={{ color: \"#0088ce\" }}>\n                                                            { this.props.searchTerm && <b>WHERE Name =  </b>}\n                                                            { this.props.searchTerm && `%${this.props.searchTerm}% ` }\n                                                            {/* <b>WHERE Name =  </b> %{this.props.searchTerm}% */}\n                                                             <b>ORDER BY</b> creation date <b>DESC</b></span>\n                                                    </code>\n                                                </Col>\n                                                <Col lg={3}>\n                                                <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                <select defaultValue={'none'} style={{ display: \"inline-block\" }} name=\"modelId\" className=\"form-control\" onChange={(e)=>this.onChangeTemplateId(e)}>\n                                                    <option value=\"none\" disabled hidden>Select Template</option>\n                                                    {/* <option value=\"1\">Select Template </option> */}\n                                                    {this.state.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                </div>\n                                                </Col>\n                                            </Row>}\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n\n                </Row>\n            </form>\n        )\n    }\n}\n","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getContentDetailsByCollectionTypeAndId, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            activeTabKey: 0,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        this.setState({ activeTabKey: index })\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async () => {\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (this.props.collectionType && this.props.contentId) {\n          if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n            const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n            this.setState({activeTabKey:0})\n          }\n        }\n      }\n\n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} onHide={this.state.currentCode=[this.props.contentId]}>\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.state.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import moment from 'moment';\nimport { Col, Grid, PaginationRow, Row, ListView, ListViewItem } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\n\nexport default class MultiContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // PAGINATION STATE\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      searchBtnClk: false,\n      // MODAL STATE\n      show: false,\n      contentDetailsOnModal: {},\n      // SEARCH STATE\n      searchQuery: '',\n      setSearchBy: '',\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: [],\n      contentIdForModal: '',\n    }\n    this.searchByKey = ''\n  }\n\n  componentDidMount = async () => {\n    this.populateConfigForm();\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n  }\n  \n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      if (this.props.searchText || this.searchByKey) {\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText ? this.props.searchText : this.state.searchQuery, this.props.colLabel, this.state.page, this.state.pageSize\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.shouldShowEtSaveBtn('visible');\n  }\n\n  populateConfigForm = async () => {\n    if (this.props.selectedCollectionTypeValue.value && this.props.selectedCollectionTypeValue.label) {\n      this.setState({ selectedCollectionType: [this.props.selectedCollectionTypeValue] })\n      if (this.props.searchText && this.props.colLabel) {\n        this.searchByKey = this.props.colLabel;\n        this.setState({searchQuery: this.props.searchText})\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText, this.props.colLabel, PAGE, PAGESIZE\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.props.selectedCollectionTypeValue.value)\n      }\n    }\n    if (this.props.selectedContentList.length) {\n      this.setState({selectedContent: this.props.selectedContentList})\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  stateUpdateOnFilterContentsByName(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true\n    });\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n    this.setState({ show: true, contentDetailsOnModal: content, contentIdForModal: content && content.id })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    this.props.setQueryTerm('');\n    this.props.setFieldSearchBy('');\n    this.setState({ contents: [], selectedContent: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType, searchQuery: '' })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n      this.props.setSelectedContentName(collType.value, collType.label, this.state.searchQuery)\n    } else {\n      this.props.setSelectedContentName(null, null, null);\n    }\n    this.setState({ contentIdForModal: undefined });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n      setSearchBy: contentData && contentData.results.length && Object.keys(contentData.results[0])[1],\n      // selectedContent: [] // commented due to issue of clearing the cache of selected content.\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    // collectionType, query, searchBy\n    this.props.setFieldSearchBy(this.searchByKey);\n    if (this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n      );\n      this.stateUpdateOnFilterContentsByName(searchResult);\n    } else {\n      this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n    }\n  }\n\n  handleQueryChange = (e) => {\n    e.preventDefault();\n    this.props.setQueryTerm( e.target.value );\n    this.setState({ searchQuery: e.target.value })\n  }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  onContentSelect(content) {\n    if (!this.state.selectedContent.find(contentItem => (contentItem.id === content.id))) {\n      this.setState({ selectedContent: [content, ...this.state.selectedContent] })\n    } else {\n      const removedUnselectedContentId = this.state.selectedContent.filter(contentItem => contentItem.id !== content.id);\n      this.setState({ selectedContent: removedUnselectedContentId })\n    }\n  }\n\n\n  onContentListSaveHandler = () => {\n    this.props.setContentTemplate(this.state.selectedContent.map((el) => ({ ...el, contentId: el.id, templateId: null })))\n  }\n\n  checkIfSelected = (content) => {\n    if (this.state.selectedContent.length) {\n      const selectedItem = this.state.selectedContent.find(el => { return (el.id === content.id); })\n      if (selectedItem) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n   fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  isToEnableSaveQueryBtn() {\n    return !(this.state.selectedContent.length === 0 && this.state.contents && this.state.contents.length);\n  }\n\n  editMode = (key) => {\n    if (Object.keys(this.props.selectedCollectionTypeValue).length && this.props.selectedCollectionTypeValue.label && this.props.selectedCollectionTypeValue.value) {\n      return this.props.selectedCollectionTypeValue[key]\n    }\n    else {\n      return null;\n    }\n  }\n\n  render() {\n    const pagination = {\n      page: this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n              Content List\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b>{SELECT_COLLECTION_TYPE}</b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n              placeholder={SELECT_COLLECTION_TYPE}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        value={this.props.searchText}\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                        placeholder={SEARCH_CONTENT_BY_NAME}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}>Search</button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                <table className=\"table dataTable table-striped table-bordered table-hover\">\n                  <thead>\n                    <tr>\n                      {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.contents.map(content => {\n                      return (\n                        <tr key={content.id}>\n                          <td width=\"5%\" align=\"center\">\n                            <input onClick={() => {\n                              this.onContentSelect(content); if (!this.state.selectedContent.length) {\n                                this.props.setQueryTerm('')\n                              }\n                            }}\n                              type=\"checkbox\" checked={this.checkIfSelected(content)} id={content + content.id} name=\"content\" value={content.id}\n                            />\n                          </td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                        </tr>)\n                    })}\n                  </tbody>\n                </table>\n                <div className=\"custom-page\"></div>\n                <PaginationRow\n                  itemCount={this.state.totalItems}\n                  itemsStart={itemsStart}\n                  itemsEnd={itemsEnd}\n                  viewType=\"table\"\n                  pagination={pagination}\n                  amountOfPages={this.state.lastPage}\n                  pageInputValue={this.state.currPageWillUpdating}\n                  onPageSet={this.changePage}\n                  onPerPageSelect={this.onPerPageSelect}\n                  onFirstPage={() => { this.setState({ searchBtnClk: false }); this.changePage(1) }}\n                  onPreviousPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page - 1) }}\n                  onPageInput={this.onPageInput}\n                  onNextPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page + 1) }}\n                  onLastPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.lastPage) }}\n                  onSubmit={this.onSubmit}\n                // messages={messages} i18n\n                />\n              </Col>\n            </Row>\n            {\n              <>\n                <Row className=\"mt-2\" >\n                  <Col sm={12}>\n                    <h6><b>Widget Configuration</b></h6>\n                  </Col>\n                </Row>\n                <Row className=\"mt-2\" >\n                  <Col sm={2}>\n                    Query Filter\n                  </Col>\n                  <Col sm={10} className=\"queryBg\">\n                    <code>\n                      <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.state.selectedCollectionType[0].label} </span>\n                      <span style={{ color: \"#0088ce\" }}>\n                        {\n                          (this.state.searchQuery.length || this.props.searchText.length) > 0 && (<><b>WHERE Name = </b> %{this.state.searchQuery || this.props.searchText}% </>)\n                        }\n                        <b>ORDER BY</b> creation date <b>DESC</b>\n                      </span>\n                    </code>\n                  </Col>\n                </Row>\n              </>}\n            {this.state.selectedContent.length > 0 && this.state.selectedContent.map(content => {\n              return (\n                <Row className=\"mt-2\" key={content.id} style={{ borderBottom: \"1px solid lightgrey\", padding: \".5rem\" }}>\n                  <Col sm={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                    {this.fetchTitleOrName(content)}\n                  </Col>\n                  <Col sm={8}>\n                    {this.state.collectionType[0] && this.state.collectionType[0].label || this.state.selectedCollectionType && this.state.selectedCollectionType[0].label}\n                  </Col>\n                  <Col sm={2} className={\"SingleContentConfigFormBody__addButtons\"}>\n                    <button className=\"btn\" onClick={()=>this.onContentSelect(content)}>Remove</button>\n                  </Col>\n                </Row>\n              )\n            })}\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={6}>\n              </Col>\n              <Col sm={6} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n\n                  <button className=\"btn-default btn\" onClick={()=>this.props.setSelectedContentName(this.editMode('value'), this.editMode('label'))}>Cancel</button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={this.isToEnableSaveQueryBtn()}>\n                    Save as Query\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={!this.state.selectedContent.length}>\n                    Save as list of Contents\n                  </button>\n\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName}/>\n      </Grid>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport Config from './page/Config';\nimport MultiContentList from './page/MultiContentList';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentName: null,\n            mappingOfContentTemplate: [],\n            contentIdAndTemplateId: '',\n            selectedCollectionType: null,\n            searchText: '',\n            saveQuery: '',\n            colLabel: ''\n        };\n    }\n\n    setContentTemplate = (data) => {\n        const getJsonString = JSON.stringify(data.map(el => ({ templateId: el.templateId, contentId: el.contentId })));\n        this.setState({ mappingOfContentTemplate: data, contentIdAndTemplateId: encodeURI(getJsonString) });\n    }\n\n    setSelectedContentName = (contentName, contentLabel) => {\n        this.setState({ selectedContentName: contentName, selectedCollectionType: contentLabel })\n    }\n\n    setQueryTerm = (searchTerm) => {\n        this.setState({ searchText: searchTerm })\n    }\n\n    SaveQueryHandler = (saveQueryData) => {\n        this.setState({ saveQuery: encodeURI(JSON.stringify(saveQueryData)) });\n    }\n\n    setFieldSearchBy = (fieldSearchWith) => {\n        this.setState({ colLabel: fieldSearchWith })\n    }\n\n    render() {\n        return (\n            <>\n                <HashRouter>\n                    <Switch>\n                        <Route path='/' exact>\n                            <Config\n                                selectedContent={this.state.mappingOfContentTemplate}\n                                mappingOfContentTemplate={this.state.mappingOfContentTemplate}\n                                setContentTemplate={this.setContentTemplate}\n                                selectedContentLabel={this.state.selectedCollectionType}\n                                searchTerm={this.state.searchText}\n                                SaveQueryHandler={this.SaveQueryHandler}\n                                selectedContentName={this.state.selectedContentName}\n                            />\n                        </Route>\n                        <Route path='/configpage' exact>\n                            <MultiContentList\n                                setContentTemplate={this.setContentTemplate}\n                                setSelectedContentName={this.setSelectedContentName}\n                                setQueryTerm={this.setQueryTerm}\n                                setFieldSearchBy={this.setFieldSearchBy}\n                                searchText={this.state.searchText}\n                                selectedCollectionTypeValue={{label: this.state.selectedCollectionType, value: this.state.selectedContentName}}\n                                selectedContentList={this.state.mappingOfContentTemplate}\n                                colLabel={this.state.colLabel}\n                            />\n                        </Route>\n                    </Switch>\n                </HashRouter>\n            </>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass WidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        ReactDOM.render(<App ref={this.reactRootRef} />, this.mountPoint);\n    }\n}\n\ncustomElements.get('list-content-widget-config') || customElements.define('list-content-widget-config', WidgetElement);\n\nexport default WidgetElement;\n"],"sourceRoot":""}