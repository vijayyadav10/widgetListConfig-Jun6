{"version":3,"sources":["helper/Constant.js","api/Api.js","helper/Helper.js","ui/SimpleTable.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/MultiContentList.js","en.js","it.js","App.js","custom-element/et-app.js"],"names":["PERPAGEOPTIONS","SELECT","id","NAME","CREATEDBY","LASTEDITED","CREATEDDATE","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","NO_DATA_AVAILABLE_MSG","domain","process","templateBaseUrl","rootAdminEndPoint","sortByCreateDateByDescOrder","localeUrl","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","data","getContents","collectionType","page","pageSize","url","getLocales","getContentDetailsByCollectionTypeAndId","contentId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","token","window","entando","keycloak","authenticated","localStorage","getItem","headers","Authorization","config","defaultOptions","getKey","content","keys","Object","index","findIndex","item","toLowerCase","allowedKeys","filter","includes","length","searchByKey","SimpleTable","props","renderToggleButton","isMenuShown","onClick","type","style","position","height","top","right","border","e","preventDefault","className","onChangeTemplateId","setState","templateSelectedForContent","target","value","templateChangedForContent","applyTemplateToContent","mappingOfContentTemplate","map","el","templateId","setContentTemplate","onApplyToAll","document","getElementsByName","forEach","state","applyTemplateToAllContent","toString","templateType","selectedTemplateType","parseSelectedContent","this","selectedContent","JSON","parse","decideToShowQuery","contentAttribute","idx","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","width","defaultValue","display","name","onChange","message","disabled","hidden","templateList","templateName","textAlign","to","margin","React","Component","Title","createdAt","createDate","selectDefaultTemplate","strapiDomain","Config","setSelectedContent","selectedContentArr","selectedContenttype","handleTypeaheadChangeContentType","selected","selectedContentType","option","label","componentDidMount","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","element","push","info","pluralName","selectedContentName","templatesList","collectionTypes","handleAddNewContent","strapiContentManagerUrl","newWindow","open","focus","selectedContentLabel","SaveQueryHandler","searchTerm","bind","console","log","xs","title","role","bsStyle","manipulateIsEditable","marginTop","setTemplateId","borderRight","lg","padding","color","intl","formatMessage","injectIntl","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","Number","checkIfComponent","dataObj","arr","split","indexOf","replace","Array","isArray","theKey","theIndex","Panel","eventKey","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","fontSize","Col","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","paddingRight","lineHeight","renderAccordionData","toggle","Body","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","setActiveTabKey","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","componentDidUpdate","prevProps","prevState","show","mockRows","selectedCollectionType","collectionAttributes","dummyData","dialogClassName","onHide","Header","fetchTitleOrName","tabIndex","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","MultiContentList","populateConfigForm","setCollectionTypeState","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","getContentsByCollectionType","searchText","selectedCollectionTypeValue","searchQuery","colLabel","searchResult","stateUpdateOnFilterContentsByName","componentWillUnmount","stowSearchQueryTillSubmit","selectedContentList","btnVisibility","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","setFieldSearchBy","contents","collType","contentData","results","lastPage","pagination","pageCount","totalItems","total","setSearchBy","setPage","isNaN","totalPages","newPaginationState","assign","pageChangeValue","onContentSearch","handleQueryChange","onPerPageSelect","onPageInput","onSubmit","onContentListSaveHandler","setQueryTerm","setSelectedContentName","checkIfSelected","find","editMode","isEditable","cancelHandler","tempSelectedCollectionType","collectionTypeApiData","displayName","singularName","contentItem","removedUnselectedContentId","perPage","perPageOptions","itemsStart","itemsEnd","Math","min","placeholder","emptyLabel","options","toggleMenu","align","onContentSelect","checked","itemCount","viewType","amountOfPages","pageInputValue","onPageSet","changePage","onFirstPage","onPreviousPage","onNextPage","onLastPage","messages","sm","borderBottom","isToEnableSaveQueryBtn","App","setLocale","getJsonString","stringify","contentIdAndTemplateId","encodeURI","contentName","contentLabel","saveQueryData","saveQuery","fieldSearchWith","currLocale","en","it","path","exact","WidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","MainApp","ref","ReactDOM","render","current","createElement","appendChild","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.646d6934.chunk.js","sourcesContent":["import { locale } from \"moment\";\nimport {  FormattedMessage } from \"react-intl\";\n\n/*********************\n * PAGINATION ********\n *********************/\n\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = \"Select Collection Type\"; \n\n/*********************\n * UI LABEL **********\n *********************/\nexport const SELECT = <FormattedMessage id='app.select' />\nexport const NAME = <FormattedMessage id='app.name' />\nexport const CREATEDBY = <FormattedMessage id='app.created' />\nexport const LASTEDITED = <FormattedMessage id='app.lastEdited' />\nexport const CREATEDDATE = <FormattedMessage id='app.createdDate' />\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    LASTEDITED: LASTEDITED,\n    CREATEDDATE: CREATEDDATE\n}\n\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.addNewContent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS =  [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = <FormattedMessage id='app.noDataAvailable' />","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst localeUrl = `${domain}/i18n/locales`\n\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    // const data = await axios.get(`${templateBaseUrl}`);\n    //TODO: Uncomment when using proper token system for template management.\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    // return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\nexport const TableBuilder = (tableMetaData) => {\n    console.log(\"tableMetaData =>\",tableMetaData);\n}\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    searchByKey = '';\n    return '-';\n}\n\nexport const PAGINATION_MESSAGES = (props) => ({\n    \"firstPage\": props.intl.formatMessage({ id: \"app.firstPage\" }),\n    \"previousPage\": props.intl.formatMessage({ id: \"app.previousPage\" }),\n    \"currentPage\": props.intl.formatMessage({ id: \"app.currentPage\" }),\n    \"nextPage\": props.intl.formatMessage({ id: \"app.nextPage\" }),\n    \"lastPage\": props.intl.formatMessage({ id: \"app.lastPage\" }),\n    \"perPage\": props.intl.formatMessage({ id: \"app.perPage\" }),\n    \"of\": props.intl.formatMessage({ id: \"app.of\" })\n});","import moment from 'moment';\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport { getKey } from '../helper/Helper';\nimport {  FormattedMessage } from \"react-intl\";\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n            templateChangedForContent: null,\n            templateSelectedForContent: 0,\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e, contentId) => {\n        // this.props.setTemplateId(e.target.value);\n        this.setState({ templateSelectedForContent: e.target.value })\n        this.setState({ templateChangedForContent: contentId });\n        const applyTemplateToContent = this.props.mappingOfContentTemplate.map(el => {\n            el.contentId === contentId && (el.templateId = e.target.value)\n            return el;\n        });\n        this.props.setContentTemplate(applyTemplateToContent);\n    }\n\n    onApplyToAll = () => {\n        document.getElementsByName('modelId').forEach((el) => { el.value = `${this.state.templateSelectedForContent}` })\n        const applyTemplateToAllContent = this.props.mappingOfContentTemplate.map(el => ({ ...el, templateId: this.state.templateSelectedForContent.toString() }));\n        this.props.setContentTemplate(applyTemplateToAllContent);\n    }\n\n    render() {\n        let parseSelectedContent = [];\n        if (typeof this.props.selectedContent === 'string') {\n            parseSelectedContent = JSON.parse(this.props.selectedContent);\n        } else {\n            parseSelectedContent = this.props.selectedContent;\n        }\n\n        return (\n            <>\n                <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                    <thead>\n                        <tr  className={this.props.decideToShowQuery() ? 'disabled-table' : ''}>\n                            {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            parseSelectedContent.length > 0 && (\n                                parseSelectedContent.map(item => {\n                                    return (\n                                        <tr key={item.id}>\n                                            <td>{item[getKey(item)]}</td>\n                                            {/* {fetchTitleOrName(item)} */}\n                                            <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                            <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                            <td width=\"30%\">\n                                                <select defaultValue={'none'} style={{ display: \"inline-block\", width: \"50%\" }} name=\"modelId\" className=\"form-control\" onChange={(e) => this.onChangeTemplateId(e, item.id)}>\n                                                    {<FormattedMessage id='app.selectTemplate' >\n                                                        {(message) => <option value='none' disabled hidden>{message}</option>}\n                                                    </FormattedMessage>}\n                                                    {this.props.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                {item.id === this.state.templateChangedForContent && <div onClick={this.onApplyToAll} style={{ display: \"inline-block\", width: \"50%\", textAlign: \"center\" }}>\n                                                    <Link to=\"#\">\n                                                        <span className=\"fa fa-copy\" style={{ margin: \"0px 10px\" }}></span>\n                                                        <FormattedMessage id='app.applyToAllContents' />\n                                                    </Link>\n                                                </div>}\n                                            </td>\n                                        </tr>\n                                    )\n                                })\n                            )\n                        }\n                    </tbody>\n                </table>\n            </>\n        );\n\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.name\" ,\n    createdAt: \"app.created\",\n    updatedAt: \"app.lastEdited\",\n    createDate: \"app.createdDate\",\n    selectDefaultTemplate: \"app.selectDefaultTemplate\"\n    // restirctions: \"Restrictions\"\n}","import {\n    Button, Col, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getCollectionTypes, getTemplate } from '../api/Api';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport {  FormattedMessage, injectIntl } from \"react-intl\";\n\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_API_TARGET_URL}`;\n\nclass Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            // selectedContent: [],\n            // name: null,\n            // nameTwo: null,\n            collectionTypes: [],\n            // selectedContentId: 0,\n            // selectedTemplateId: 'default',\n            templateList: []\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    setSelectedContent = (selectedContentArr, selectedContenttype) => {\n        // this.setState({ selectedContent: selectedContentArr })\n        // this.setState({ name: selectedContentArr })\n        // this.setState({ nameTwo: encodeURIComponent(JSON.stringify(selectedContentArr)) })\n        // this.setState({ selectedContentId: selectedContentArr[0].id })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n    componentDidMount = async () => {\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n        let { data: templatesList } = await getTemplate(this.props.selectedContentName ? this.props.selectedContentName : '');\n        this.setState({ templateList: templatesList, collectionTypes: templatesList })\n    }\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    decideToShowQuery = () => {\n        return (\n            this.props.selectedContentLabel && !this.props.selectedContent.length\n        )\n    }\n\n    onChangeTemplateId = (e) => {\n        this.props.SaveQueryHandler(\n            {\n                \"templateId\": e.target.value,\n                \"searchTerm\": this.props.searchTerm\n            }\n        );\n    }\n\n    render() {\n        console.log(\"Main this.props,\", this.props, \"Main this.state\",this.state);\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            \n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.contentList\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                    <span><FormattedMessage id=\"app.info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/configpage\">\n                                            <Button bsStyle=\"primary\"\n                                                onClick={() => (this.decideToShowQuery() || this.props.selectedContent.length) && this.props.manipulateIsEditable('edit')}\n                                            >\n                                                {this.props.selectedContent.length || this.decideToShowQuery() ? <FormattedMessage id='app.edit' /> : <FormattedMessage id='app.addExistingContent' />}\n                                                {!this.decideToShowQuery() && this.props.selectedContent.length > 0 && ' list of '}\n                                                {this.decideToShowQuery() && <FormattedMessage id='app.query' />}\n                                                {this.props.selectedContent.length ? <FormattedMessage id='app.contentsButton' /> : !this.decideToShowQuery() ? <FormattedMessage id='app.contentButton' /> : ''}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    // content={this.state.selectedContent}\n                                    selectedContent={this.props.selectedContent}\n                                    mappingOfContentTemplate={this.props.mappingOfContentTemplate}\n                                    setContentTemplate={this.props.setContentTemplate}\n                                    decideToShowQuery={this.decideToShowQuery}\n                                />\n                                {\n                                     (\n                                        <div className=\"form-horizontal SingleContentConfigForm custom-well well\">\n                                            <Row className=\"divider\">\n                                                <Col xs={2}>\n                                                    <span className=\"SectionTitle\" role=\"button\">\n                                                        <span><FormattedMessage id='app.query' /></span>\n                                                    </span>\n                                                </Col>\n                                                <Col xs={10}>\n                                                    <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                        <span><b><FormattedMessage id='app.selectDefaultTemplate' /></b></span>\n                                                    </div>\n                                                </Col>\n                                            </Row>\n                                            {this.decideToShowQuery() && <Row>\n                                                <Col xs={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                    <FormattedMessage id='app.savedAsQuery' />\n                                                </Col>\n                                                <Col xs={1} style={{ borderRight: \"1px solid lightgrey\" }}>\n                                                </Col>\n                                                <Col lg={6} style={{ border: \"1px solid lightgrey\", padding: \".2rem\" }}>\n                                                    <code>\n                                                        <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.props.selectedContentLabel} </span>\n                                                        <span style={{ color: \"#0088ce\" }}>\n                                                            { this.props.searchTerm && <b>WHERE Name =  </b>}\n                                                            { this.props.searchTerm && `%${this.props.searchTerm}% ` }\n                                                            {/* <b>WHERE Name =  </b> %{this.props.searchTerm}% */}\n                                                             <b>ORDER BY</b> creation date <b>DESC</b></span>\n                                                    </code>\n                                                </Col>\n                                                <Col lg={3}>\n                                                <div className=\"SingleContentConfigFormBody__addButtons\">\n                                                <select defaultValue={'none'} style={{ display: \"inline-block\" }} name=\"modelId\" className=\"form-control\" onChange={(e)=>this.onChangeTemplateId(e)}>\n                                                    <option value=\"none\" disabled hidden>{this.props.intl.formatMessage({ id: \"app.selectTemplate\" })}</option>\n                                                    {this.state.templateList.map((el) => {\n                                                        return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                    })}\n                                                </select>\n                                                </div>\n                                                </Col>\n                                            </Row>}\n                                        </div>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </Col>\n\n                </Row>\n            </form>\n        )\n    }\n}\n\nexport default injectIntl(Config);","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem', paddingRight: '2rem', lineHeight: '1.2' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getContentDetailsByCollectionTypeAndId, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        this.props.setActiveTabKey(index);\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async () => {\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n        if (this.props.collectionType && this.props.contentId) {\n            if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n                const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n                this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n                this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n                this.props.setActiveTabKey(0);\n                this.setState({ currentCode: [this.props.contentId] })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.props.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                            Ok\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import moment from 'moment';\nimport { Col, Grid, PaginationRow, Row, ListView, ListViewItem } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";          \nimport { PAGINATION_MESSAGES } from '../helper/Helper';\n class MultiContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // PAGINATION STATE\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      searchBtnClk: false,\n\n      // MODAL STATE\n      show: false,\n      activeTabKey: 0,\n      contentDetailsOnModal: {},\n\n      // SEARCH STATE\n      searchQuery: '',\n      setSearchBy: '',\n      stowSearchQueryTillSubmit: '',\n\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: [],\n      contentIdForModal: '',\n      tempSelectedCollectionType: [],\n    }\n    this.searchByKey = '';\n    // this.stowSearchQueryTillSubmit = '';\n\n  }\n\n  componentDidMount = async () => {\n    this.populateConfigForm();\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n  }\n  \n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      if (this.props.searchText || this.searchByKey) {\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value ? this.state.selectedCollectionType[0].value : this.props.selectedCollectionTypeValue.value,\n          this.state.searchQuery ? this.state.searchQuery : this.props.searchText, this.props.colLabel, this.state.page, this.state.pageSize\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, this.state.page, this.state.pageSize);\n      }\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.shouldShowEtSaveBtn('visible');\n  }\n\n  populateConfigForm = async () => {\n    if (this.props.selectedCollectionTypeValue.value && this.props.selectedCollectionTypeValue.label) {\n      this.setState({ selectedCollectionType: [this.props.selectedCollectionTypeValue] })\n      if (this.props.searchText && this.props.colLabel) {\n        this.searchByKey = this.props.colLabel;\n        this.setState({searchQuery: this.props.searchText, stowSearchQueryTillSubmit: this.props.searchText})\n        const searchResult = await filterContentsByName(\n          this.props.selectedCollectionTypeValue.value,\n          this.props.searchText, this.props.colLabel, PAGE, PAGESIZE\n        );\n        this.stateUpdateOnFilterContentsByName(searchResult);\n      } else {\n        await this.getContentsByCollectionType(this.props.selectedCollectionTypeValue.value)\n      }\n    }\n    if (this.props.selectedContentList.length) {\n      this.setState({selectedContent: this.props.selectedContentList})\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  stateUpdateOnFilterContentsByName(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true\n    });\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n    this.setState({ show: true, contentDetailsOnModal: content, contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    // this.props.setQueryTerm('');\n    this.props.setFieldSearchBy('');\n    this.setState({ contents: [], selectedContent: [] });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType, searchQuery: '', stowSearchQueryTillSubmit: '' })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n    }\n    this.setState({ contentIdForModal: undefined });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    const contentData = await getContents(collectionType, page, pageSize);\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n      setSearchBy: contentData && contentData.results.length && Object.keys(contentData.results[0])[1],\n      // selectedContent: [] // commented due to issue of clearing the cache of selected content.\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: this.state.stowSearchQueryTillSubmit }, async () => {\n      // this.setState({ stowSearchQueryTillSubmit: '' })\n      // collectionType, query, searchBy\n      this.props.setFieldSearchBy(this.searchByKey);\n      if (this.state.searchQuery) {\n        const searchResult = await filterContentsByName(\n          this.state.selectedCollectionType[0].value,\n          this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n          );\n          this.stateUpdateOnFilterContentsByName(searchResult);\n        } else {\n          this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n        }\n    })\n  }\n\n  handleQueryChange = (e) => {\n    // this.props.setQueryTerm( e.target.value );\n    e.preventDefault();\n    this.setState({ stowSearchQueryTillSubmit: e.target.value })\n    // this.setState({ searchQuery: e.target.value })\n    \n  }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  onContentSelect(content) {\n    if (!this.state.selectedContent.find(contentItem => (contentItem.id === content.id))) {\n      this.setState({ selectedContent: [content, ...this.state.selectedContent] })\n    } else {\n      const removedUnselectedContentId = this.state.selectedContent.filter(contentItem => contentItem.id !== content.id);\n      this.setState({ selectedContent: removedUnselectedContentId })\n    }\n  }\n\n\n  onContentListSaveHandler = () => {\n    this.props.setQueryTerm( this.state.searchQuery );\n    this.props.setContentTemplate(this.state.selectedContent.map((el) => ({ ...el, contentId: el.id, templateId: null })))\n    this.props.setSelectedContentName(this.state.selectedCollectionType[0].value, this.state.selectedCollectionType[0].label, this.state.searchQuery)\n  }\n\n  checkIfSelected = (content) => {\n    if (this.state.selectedContent.length) {\n      const selectedItem = this.state.selectedContent.find(el => { return (el.id === content.id); })\n      if (selectedItem) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n   fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  isToEnableSaveQueryBtn() {\n    return !(this.state.selectedContent.length === 0 && this.state.contents && this.state.contents.length);\n  }\n\n   editMode = (key) => {\n     if (this.props.isEditable === 'edit' &&\n       Object.keys(this.props.selectedCollectionTypeValue).length\n       && this.props.selectedCollectionTypeValue.label\n       && this.props.selectedCollectionTypeValue.value\n     ) {  // keep in constant file\n       return this.props.selectedCollectionTypeValue[key]\n     }\n     return null\n   }\n\n   cancelHandler = () => {\n     this.props.setSelectedContentName(this.editMode('value'), this.editMode('label'))\n     if (this.props.isEditable === 'edit' && this.state.selectedContent.length) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n     if (this.props.isEditable === 'edit' && !this.props.searchText) {\n       this.setState({ searchQuery: '' });\n       this.props.setQueryTerm('');\n       return\n     }\n   }\n\n   render() {\n    const pagination = {\n      page: this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n              <FormattedMessage id=\"app.contentList\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b><FormattedMessage id=\"app.selectCollectionType\" /></b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n              placeholder={this.props.intl.formatMessage({ id: \"app.selectCollection\" })}\n              emptyLabel={this.props.intl.formatMessage({ id: \"app.noMatchesFound\" })}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button id=\"dropdown-example\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\" type=\"button\" className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.searchQuery ? this.state.searchQuery : this.state.stowSearchQueryTillSubmit}\n                        value={this.state.stowSearchQueryTillSubmit}\n                        // this.stowSearchQueryTillSubmit\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                        placeholder={this.props.intl.formatMessage({ id: \"app.searchContentByName\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id='app.search' /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                <table className=\"table dataTable table-striped table-bordered table-hover\">\n                  <thead>\n                    <tr>\n                      {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.contents.map(content => {\n                      return (\n                        <tr key={content.id}>\n                          <td width=\"5%\" align=\"center\">\n                            <input onChange={() => {\n                              this.onContentSelect(content); if (!this.state.selectedContent.length) {\n                                this.props.setQueryTerm('')\n                              }\n                            }}\n                              type=\"checkbox\" checked={this.checkIfSelected(content)} id={content + content.id} name=\"content\" value={content.id}\n                            />\n                          </td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                        </tr>)\n                    })}\n                  </tbody>\n                </table>\n                <div className=\"custom-page\"></div>\n                <PaginationRow\n                  itemCount={this.state.totalItems}\n                  itemsStart={itemsStart}\n                  itemsEnd={itemsEnd}\n                  viewType=\"table\"\n                  pagination={pagination}\n                  amountOfPages={this.state.lastPage}\n                  pageInputValue={this.state.currPageWillUpdating}\n                  onPageSet={this.changePage}\n                  onPerPageSelect={this.onPerPageSelect}\n                  onFirstPage={() => { this.setState({ searchBtnClk: false }); this.changePage(1) }}\n                  onPreviousPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page - 1) }}\n                  onPageInput={this.onPageInput}\n                  onNextPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.page + 1) }}\n                  onLastPage={() => { this.setState({ searchBtnClk: false }); this.changePage(this.state.lastPage) }}\n                  onSubmit={this.onSubmit}\n                  messages={PAGINATION_MESSAGES(this.props)}\n                />\n              </Col>\n            </Row>\n            {\n              <>\n                <Row className=\"mt-2\" >\n                  <Col sm={12}>\n                    <h6><b><FormattedMessage id='app.widgetConfiguration' /></b></h6>\n                  </Col>\n                </Row>\n                <Row className=\"mt-2\" >\n                  <Col sm={2}>\n                  <FormattedMessage id='app.queryFilter' />\n                  </Col>\n                  <Col sm={10} className=\"queryBg\">\n                    <code>\n                      <span style={{ color: \"#0088ce\" }}><b>Collection Type =  </b> {this.state.selectedCollectionType[0].label} </span>\n                      <span style={{ color: \"#0088ce\" }}>\n                        {\n                          // (this.state.searchQuery.length || this.props.searchText.length) > 0 && (<><b>WHERE Name = </b> %{this.state.searchQuery || this.props.searchText}% </>)\n                          (this.state.searchQuery.length > 0) && (<><b>WHERE Name = </b> %{this.state.searchQuery}% </>)\n                        }\n                        <b>ORDER BY</b> creation date <b>DESC</b>\n                      </span>\n                    </code>\n                  </Col>\n                </Row>\n              </>}\n            {this.state.selectedContent.length > 0 && this.state.selectedContent.map(content => {\n              return (\n                <Row className=\"mt-2\" key={content.id} style={{ borderBottom: \"1px solid lightgrey\", padding: \".5rem\" }}>\n                  <Col sm={2} style={{ borderRight: \"1px solid lightgrey\" }}>\n                    {this.fetchTitleOrName(content)}\n                  </Col>\n                  <Col sm={8}>\n                    {this.state.selectedCollectionType && this.state.selectedCollectionType[0].label}\n                  </Col>\n                  <Col sm={2} className={\"SingleContentConfigFormBody__addButtons\"}>\n                    <button className=\"btn\" onClick={()=>this.onContentSelect(content)}><FormattedMessage id='app.remove' /></button>\n                  </Col>\n                </Row>\n              )\n            })}\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={6}>\n              </Col>\n              <Col sm={6} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n\n                  <button className=\"btn-default btn\"\n                    onClick={() => this.cancelHandler()}>\n                    <FormattedMessage id='app.cancel' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={this.isToEnableSaveQueryBtn()}>\n                    <FormattedMessage id='app.saveAsQuery' />\n                  </button>\n\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\"\n                    onClick={() => this.onContentListSaveHandler()}\n                    disabled={!this.state.selectedContent.length}>\n                    <FormattedMessage id='app.saveAsListOfContents'/>\n                  </button>\n\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey} />\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(MultiContentList);                                 ","export default {\n    'app.contentList': 'Content List',\n    'app.selectCollectionType': 'Select Collection Type',\n    'app.info':'Info',\n    'app.content': 'Content',\n    'app.contentsButton': 'contents',\n    'app.contentButton': 'content',\n    'app.name':'Name',\n    'app.created':'Created by',\n    'app.lastEdited':'Last edited',\n    'app.createdDate':'Created date',\n    'app.selectDefaultTemplate':'Select default template*',\n    'app.addExistingContent':'Add existing ',\n    'app.addNewContent':'Add new content',\n    'app.select':'Select',\n    'app.selectCollection':'Choose an option',\n    'app.widgetConfiguration':'Widget Configuration',\n    'app.queryFilter':'Query Filter',\n    'app.cancel':'Cancel',\n    'app.savedAsQuery':'Saved as Query',\n    'app.saveAsQuery':'Save as Query',\n    'app.saveAsListOfContents':'Save as list of Contents',\n    'app.select':'Select',\n    // 'app.lastEdited':'Last Edited',\n    'app.createdEdited':'Created Edited',\n    'app.searchContentByName':'Filter By Name...',\n    'app.remove':'Remove',\n    'app.query':' Query',\n    'app.selectTemplate':'Select Template',\n    'app.edit':'Edit',\n    'app.queryFilter':' Query Filter',\n    'app.search':'Search',\n    'app.applyToAllContents':'Apply to all contents',\n    'app.noMatchesFound': 'No matches found',\n    'app.noDataAvailable': 'No data available',\n    'app.firstPage': 'First Page',\n    'app.previousPage': 'Previous Page',\n    'app.currentPage': 'Current Page',\n    'app.nextPage': 'Next Page',\n    'app.lastPage': 'Last Page',\n    'app.perPage': 'per page',\n    'app.of': 'of',\n    }","export default {\n    'app.contentList': 'Content Elenco',\n    'app.selectCollectionType': 'Seleziona Tipo di raccolta',\n    'app.info':'Informazioni',\n    'app.content': ' Contenuto',\n    'app.contentsButton': 'contenuti',\n    'app.contentButton': 'contenuto',\n    'app.name':'Nome',\n    'app.created':'Creata da',\n    'app.lastEdited':'Ultima modifica',\n    'app.createdDate':'Creata Data',\n    'app.selectDefaultTemplate':'Seleziona il modello predefinito*',\n    'app.addExistingContent':'Aggiungi esistente',\n    'app.addNewContent':'Aggiungi nuovo contenuto',\n    'app.select':'Seleziona',\n    'app.selectCollection':\"Scegliere un'opzione\",\n    'app.widgetConfiguration':'Configurazione del widget',\n    'app.queryFilter':'Filtro di query',\n    'app.cancel':'Annulla',\n    'app.savedAsQuery':'Salvato come query',\n    'app.saveAsQuery':'Salva come query',\n    'app.saveAsListOfContents':'Salva come elenco di contenuti',\n    'app.select':'Selezionare',\n    // 'app.lastEdited':'Ultima modifica',\n    'app.createdEdited':'Data di Creazione',\n    'app.searchContentByName':'Filtra per nome',\n    'app.remove':'Rimuovere',\n    'app.query':'Domanda',\n    'app.selectTemplate':'Seleziona Modello',\n    'app.edit':'modificare',\n    'app.query':'Filtro di query',\n    'app.search':'Ricerca',\n    'app.applyToAllContents':'Applica a tutti i contenuti',\n    'app.noMatchesFound': 'Nessun risultato trovato',\n    'app.noDataAvailable': 'Nessun dato disponibile',\n    'app.firstPage': 'Prima pagina',\n    'app.previousPage': 'Pagina precedente',\n    'app.currentPage': 'Pagina corrente',\n    'app.nextPage': 'Pagina successiva',\n    'app.lastPage': 'Ultima pagina',\n    'app.perPage': 'per pagina',\n    'app.of': 'di',\n    }\n\n    //'app.content': 'Contenuto',","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { IntlProvider } from \"react-intl\";\nimport Config from './page/Config';\nimport MultiContentList from './page/MultiContentList';\n\nimport en from \"./en.js\";\nimport it from \"./it.js\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentName: null,\n            mappingOfContentTemplate: [],\n            contentIdAndTemplateId: '',\n            selectedCollectionType: null,\n            searchText: '',\n            saveQuery: '',\n            colLabel: '',\n            locale:'en',\n            messages:{ en, it },\n            isEditable: '',\n        };\n    }\n\n    componentDidMount = () => {\n        this.setLocale();\n    }\n\n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContentTemplate = (data) => {\n        const getJsonString = JSON.stringify(data.map(el => ({ templateId: el.templateId, contentId: el.contentId })));\n        this.setState({ mappingOfContentTemplate: data, contentIdAndTemplateId: encodeURI(getJsonString) });\n    }\n\n    setSelectedContentName = (contentName, contentLabel) => {\n        this.setState({ selectedContentName: contentName, selectedCollectionType: contentLabel })\n    }\n\n    setQueryTerm = (searchTerm) => {\n        this.setState({ searchText: searchTerm })\n    }\n\n    SaveQueryHandler = (saveQueryData) => {\n        this.setState({ saveQuery: encodeURI(JSON.stringify(saveQueryData)) });\n    }\n\n    setFieldSearchBy = (fieldSearchWith) => {\n        this.setState({ colLabel: fieldSearchWith })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    manipulateIsEditable = (value) => this.setState({ isEditable: value });\n\n    render() {\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.state.messages[this.state.locale]}>\n                <>\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config\n                                    selectedContent={this.state.mappingOfContentTemplate}\n                                    mappingOfContentTemplate={this.state.mappingOfContentTemplate}\n                                    setContentTemplate={this.setContentTemplate}\n                                    selectedContentLabel={this.state.selectedCollectionType}\n                                    searchTerm={this.state.searchText}\n                                    SaveQueryHandler={this.SaveQueryHandler}\n                                    selectedContentName={this.state.selectedContentName}\n                                    manipulateIsEditable={this.manipulateIsEditable}\n                                />\n                            </Route>\n                            <Route path='/configpage' exact>\n                                <MultiContentList\n                                    setContentTemplate={this.setContentTemplate}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    setQueryTerm={this.setQueryTerm}\n                                    setFieldSearchBy={this.setFieldSearchBy}\n                                    searchText={this.state.searchText}\n                                    selectedCollectionTypeValue={{ label: this.state.selectedCollectionType, value: this.state.selectedContentName }}\n                                    selectedContentList={this.state.mappingOfContentTemplate}\n                                    colLabel={this.state.colLabel}\n                                    isEditable={this.state.isEditable}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass WidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        // this.render()\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        const MainApp = <App ref={this.reactRootRef} config={this.#config} />;\n        ReactDOM.render(MainApp, this.mountPoint);\n    }\n}\n\ncustomElements.get('list-content-widget-config') || customElements.define('list-content-widget-config', WidgetElement);\n\nexport default WidgetElement;\n"],"sourceRoot":""}